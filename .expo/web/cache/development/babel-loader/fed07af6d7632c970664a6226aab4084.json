{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\node_modules\\\\react-navigation\\\\node_modules\\\\react-navigation-drawer\\\\dist\\\\views\\\\DrawerNavigatorItems.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ThemeContext } from '@react-navigation/core';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function (_React$Component) {\n  _inherits(DrawerNavigatorItems, _React$Component);\n\n  var _super = _createSuper(DrawerNavigatorItems);\n\n  function DrawerNavigatorItems() {\n    var _this;\n\n    _classCallCheck(this, DrawerNavigatorItems);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._getActiveTintColor = function () {\n      var activeTintColor = _this.props.activeTintColor;\n\n      if (!activeTintColor) {\n        return;\n      } else if (typeof activeTintColor === 'string') {\n        return activeTintColor;\n      }\n\n      return activeTintColor[_this.context];\n    };\n\n    _this._getInactiveTintColor = function () {\n      var inactiveTintColor = _this.props.inactiveTintColor;\n\n      if (!inactiveTintColor) {\n        return;\n      } else if (typeof inactiveTintColor === 'string') {\n        return inactiveTintColor;\n      }\n\n      return inactiveTintColor[_this.context];\n    };\n\n    _this._getActiveBackgroundColor = function () {\n      var activeBackgroundColor = _this.props.activeBackgroundColor;\n\n      if (!activeBackgroundColor) {\n        return;\n      } else if (typeof activeBackgroundColor === 'string') {\n        return activeBackgroundColor;\n      }\n\n      return activeBackgroundColor[_this.context];\n    };\n\n    _this._getInactiveBackgroundColor = function () {\n      var inactiveBackgroundColor = _this.props.inactiveBackgroundColor;\n\n      if (!inactiveBackgroundColor) {\n        return;\n      } else if (typeof inactiveBackgroundColor === 'string') {\n        return inactiveBackgroundColor;\n      }\n\n      return inactiveBackgroundColor[_this.context];\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerNavigatorItems, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          items = _this$props.items,\n          activeItemKey = _this$props.activeItemKey,\n          getLabel = _this$props.getLabel,\n          renderIcon = _this$props.renderIcon,\n          onItemPress = _this$props.onItemPress,\n          itemsContainerStyle = _this$props.itemsContainerStyle,\n          itemStyle = _this$props.itemStyle,\n          labelStyle = _this$props.labelStyle,\n          activeLabelStyle = _this$props.activeLabelStyle,\n          inactiveLabelStyle = _this$props.inactiveLabelStyle,\n          iconContainerStyle = _this$props.iconContainerStyle,\n          drawerPosition = _this$props.drawerPosition;\n\n      var activeTintColor = this._getActiveTintColor();\n\n      var inactiveTintColor = this._getInactiveTintColor();\n\n      var activeBackgroundColor = this._getActiveBackgroundColor();\n\n      var inactiveBackgroundColor = this._getInactiveBackgroundColor();\n\n      return React.createElement(View, {\n        style: [styles.container, itemsContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 12\n        }\n      }, items.map(function (route, index) {\n        var _ref;\n\n        var focused = activeItemKey === route.key;\n        var color = focused ? activeTintColor : inactiveTintColor;\n        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        var scene = {\n          route: route,\n          index: index,\n          focused: focused,\n          tintColor: color\n        };\n        var icon = renderIcon(scene);\n        var label = getLabel(scene);\n        var accessibilityLabel = typeof label === 'string' ? label : undefined;\n        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return React.createElement(TouchableItem, {\n          key: route.key,\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          onPress: function onPress() {\n            onItemPress({\n              route: route,\n              focused: focused\n            });\n          },\n          delayPressIn: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 16\n          }\n        }, React.createElement(SafeAreaView, {\n          style: [{\n            backgroundColor: backgroundColor\n          }, styles.item, itemStyle],\n          forceInset: (_ref = {}, _defineProperty(_ref, drawerPosition, 'always'), _defineProperty(_ref, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty(_ref, \"vertical\", 'never'), _ref),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }\n        }, icon ? React.createElement(View, {\n          style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }\n        }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle, extraLabelStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 46\n          }\n        }, label) : label));\n      }));\n    }\n  }]);\n\n  return DrawerNavigatorItems;\n}(React.Component);\n\nDrawerNavigatorItems.contextType = ThemeContext;\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/node_modules/react-navigation/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"names":["React","ThemeContext","SafeAreaView","TouchableItem","DrawerNavigatorItems","_getActiveTintColor","activeTintColor","props","context","_getInactiveTintColor","inactiveTintColor","_getActiveBackgroundColor","activeBackgroundColor","_getInactiveBackgroundColor","inactiveBackgroundColor","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","inactiveIcon","Component","contextType","defaultProps","light","dark","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { ThemeContext } from '@react-navigation/core';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nclass DrawerNavigatorItems extends React.Component {\n  static contextType = ThemeContext;\n\n  _getActiveTintColor = () => {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  };\n\n  _getInactiveTintColor = () => {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  };\n\n  _getActiveBackgroundColor = () => {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  };\n\n  _getInactiveBackgroundColor = () => {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  };\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition\n    } = this.props;\n\n    const activeTintColor = this._getActiveTintColor();\n    const inactiveTintColor = this._getInactiveTintColor();\n    const activeBackgroundColor = this._getActiveBackgroundColor();\n    const inactiveBackgroundColor = this._getInactiveBackgroundColor();\n\n    return <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index) => {\n        const focused = activeItemKey === route.key;\n        const color = focused ? activeTintColor : inactiveTintColor;\n        const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        const scene = { route, index, focused, tintColor: color };\n        const icon = renderIcon(scene);\n        const label = getLabel(scene);\n        const accessibilityLabel = typeof label === 'string' ? label : undefined;\n        const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return <TouchableItem key={route.key} accessible accessibilityLabel={accessibilityLabel} onPress={() => {\n          onItemPress({ route, focused });\n        }} delayPressIn={0}>\n              <SafeAreaView style={[{ backgroundColor }, styles.item, itemStyle]} forceInset={{\n            [drawerPosition]: 'always',\n            [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n            vertical: 'never'\n          }}>\n                {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                    {icon}\n                  </View> : null}\n                {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                    {label}\n                  </Text> : label}\n              </SafeAreaView>\n            </TouchableItem>;\n      })}\n      </View>;\n  }\n}\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"]},"metadata":{},"sourceType":"module"}