{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\src\\\\components\\\\Forms\\\\MeaningForm.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from 'react-native-modal';\nimport { colors, SCREEN_WIDTH } from \"../../Styles\";\n\nvar MeaningForm = function (_React$Component) {\n  _inherits(MeaningForm, _React$Component);\n\n  var _super = _createSuper(MeaningForm);\n\n  function MeaningForm(props) {\n    var _this;\n\n    _classCallCheck(this, MeaningForm);\n\n    _this = _super.call(this, props);\n\n    _this.scrollToIndex = function (index, animated) {\n      if (index > -1 && index < _this.state.meaning.length) {\n        _this.flatList.scrollToIndex({\n          animated: animated,\n          index: index\n        });\n      }\n    };\n\n    _this.updateData = function () {\n      _this.setState({\n        meaning: JSON.parse(JSON.stringify(_this.props.data))\n      });\n    };\n\n    _this.onViewableItemsChanged = function (_ref) {\n      var viewableItems = _ref.viewableItems;\n\n      _this.setState({\n        meaningIndex: viewableItems[0].index\n      });\n\n      _this.props.onMeaningIndexChange(viewableItems[0].index);\n\n      if (_this.props.autofocus && viewableItems.length <= 1) {\n        if (_this.meaningHasFocus) _this[\"meaningTextInput\" + viewableItems[0].index].focus();else if (_this.classificationHasFocus) _this[\"classificationTextInput\" + viewableItems[0].index].focus();\n      }\n    };\n\n    _this.onMeaningTextFocus = function () {\n      _this.props.onMeaningTextFocus ? _this.props.onMeaningTextFocus() : null;\n      _this.meaningHasFocus = true;\n    };\n\n    _this.onMeaningTextBlur = function () {\n      _this.props.onMeaningTextBlur ? _this.props.onMeaningTextBlur() : null;\n      _this.meaningHasFocus = false;\n    };\n\n    _this.onClassificationTextFocus = function () {\n      _this.props.onClassificationTextFocus ? _this.props.onClassificationTextFocus() : null;\n      _this.classificationHasFocus = true;\n    };\n\n    _this.onClassificationTextBlur = function () {\n      _this.props.onClassificationTextBlur ? _this.props.onClassificationTextBlur() : null;\n      _this.classificationHasFocus = false;\n    };\n\n    _this.onMeaningTextChange = function (text, index) {\n      meaning = _this.state.meaning;\n      meaning[index].meaning_text = text;\n\n      if (index == meaning.length - 1) {\n        if (meaning[index].meaning_text != \"\" && meaning[index].meaning_text != undefined) {\n          meaning = meaning.concat({\n            meaning_id: undefined,\n            meaning_text: undefined,\n            meaning_classification: undefined,\n            meaning_datetimecreated: undefined\n          });\n        }\n      } else {\n        if (meaning[index].meaning_text == \"\" || meaning[index].meaning_text == undefined) {\n          meaning.splice(index, 1);\n        }\n      }\n\n      _this.setState({\n        meaning: JSON.parse(JSON.stringify(meaning))\n      });\n\n      _this.props.onMeaningTextChange ? _this.props.onMeaningTextChange(text, index) : null;\n    };\n\n    _this.onClassificationTextChange = function (text, index) {\n      meaning = _this.state.meaning;\n      meaning[index].meaning_classification = text;\n\n      _this.setState({\n        meaning: meaning\n      });\n\n      _this.props.onClassificationTextChange ? _this.props.onClassificationTextChange(text, index) : null;\n    };\n\n    _this._renderMeaningColumn = function (_ref2) {\n      var item = _ref2.item,\n          index = _ref2.index;\n      return React.createElement(View, {\n        style: [styles.container],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, React.createElement(TextInput, {\n        multiline: true,\n        ref: function ref(_ref3) {\n          return _this[\"meaningTextInput\" + index] = _ref3;\n        },\n        hasFocus: false,\n        style: [styles.meaningTextInput, {\n          width: _this.itemWidth ? _this.itemWidth : null,\n          paddingRight: _this.itemPaddingRight\n        }],\n        placeholder: \"Meaning of word\",\n        value: item.meaning_text,\n        onFocus: _this.onMeaningTextFocus,\n        onBlur: _this.onMeaningTextBlur,\n        onChangeText: function onChangeText(text) {\n          return _this.onMeaningTextChange(text, index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.rowContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, React.createElement(TextInput, {\n        ref: function ref(_ref4) {\n          return _this[\"classificationTextInput\" + index] = _ref4;\n        },\n        blurOnSubmit: false,\n        style: styles.classificationTextInput,\n        placeholder: \"Classification\",\n        value: item.meaning_classification,\n        onFocus: _this.onClassificationTextFocus,\n        onBlur: _this.onClassificationTextBlur,\n        onChangeText: function onChangeText(text) {\n          return _this.onClassificationTextChange(text, index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this.props.toggleVisibility();\n        },\n        style: {\n          borderRadius: 5,\n          borderWidth: 1,\n          borderColor: colors.default.blue,\n          paddingVertical: 5,\n          paddingHorizontal: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: colors.default.blue,\n          fontSize: 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, \"More Options\"))), React.createElement(Modal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    _this.state = {\n      meaning: JSON.parse(JSON.stringify(_this.props.data)),\n      meaningIndex: 0,\n      isModalVisible: false\n    };\n    _this.itemWidth;\n    _this.itemPaddingRight = 20;\n    return _this;\n  }\n\n  _createClass(MeaningForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.meaning != prevState.meaning) {\n        this.props.onMeaningDataChange ? this.props.onMeaningDataChange(this.state.meaning) : null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        onLayout: function onLayout(event) {\n          var _event$nativeEvent$la = event.nativeEvent.layout,\n              _ = _event$nativeEvent$la._,\n              _ = _event$nativeEvent$la._,\n              width = _event$nativeEvent$la.width,\n              _ = _event$nativeEvent$la._;\n          _this2.itemWidth = width;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }, React.createElement(FlatList, {\n        ref: function ref(_ref5) {\n          _this2.flatList = _ref5;\n        },\n        keyboardShouldPersistTaps: \"always\",\n        horizontal: true,\n        pagingEnabled: true,\n        style: styles.container,\n        showsHorizontalScrollIndicator: false,\n        data: this.state.meaning,\n        renderItem: this._renderMeaningColumn,\n        onViewableItemsChanged: this.onViewableItemsChanged,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        listKey: function listKey(item, index) {\n          return index.toString();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return MeaningForm;\n}(React.Component);\n\nexport default MeaningForm;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  rowContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 10\n  },\n  meaningTextInput: {\n    flex: 1,\n    textAlignVertical: 'top',\n    fontSize: 16\n  },\n  classificationTextInput: {\n    flex: 1,\n    marginRight: 20,\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/components/Forms/MeaningForm.js"],"names":["React","Modal","colors","SCREEN_WIDTH","MeaningForm","props","scrollToIndex","index","animated","state","meaning","length","flatList","updateData","setState","JSON","parse","stringify","data","onViewableItemsChanged","viewableItems","meaningIndex","onMeaningIndexChange","autofocus","meaningHasFocus","focus","classificationHasFocus","onMeaningTextFocus","onMeaningTextBlur","onClassificationTextFocus","onClassificationTextBlur","onMeaningTextChange","text","meaning_text","undefined","concat","meaning_id","meaning_classification","meaning_datetimecreated","splice","onClassificationTextChange","_renderMeaningColumn","item","styles","container","ref","meaningTextInput","width","itemWidth","paddingRight","itemPaddingRight","rowContainer","classificationTextInput","toggleVisibility","borderRadius","borderWidth","borderColor","default","blue","paddingVertical","paddingHorizontal","color","fontSize","isModalVisible","prevProps","prevState","onMeaningDataChange","event","nativeEvent","layout","_","toString","Component","StyleSheet","create","flex","flexDirection","alignItems","marginVertical","textAlignVertical","marginRight"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View, StyleSheet, Text, TextInput, TouchableOpacity, FlatList } from 'react-native';\r\nimport Modal from 'react-native-modal';\r\n\r\nimport { colors, SCREEN_WIDTH } from '../../Styles';\r\n\r\nclass MeaningForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            meaning: JSON.parse(JSON.stringify(this.props.data)),\r\n            meaningIndex: 0,\r\n            isModalVisible: false,\r\n        }\r\n\r\n        this.itemWidth;\r\n        this.itemPaddingRight = 20;\r\n\r\n        // Props\r\n        // meaningValue\r\n        // classificationValue\r\n        // synonymsValue\r\n        // antonymsValue\r\n        // onMeaningChange\r\n        // onClassificationChange\r\n        // onSynonymsChange\r\n        // onAntonymsChange\r\n\r\n        // onMeaningIndexChange\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // onMeaningDataChanged = {(meaning) => //handle meaningData}\r\n        if (this.state.meaning != prevState.meaning) {\r\n            this.props.onMeaningDataChange ? this.props.onMeaningDataChange(this.state.meaning) : null;\r\n        }\r\n    }\r\n\r\n    // Scroll to index function\r\n    scrollToIndex = (index, animated) => {\r\n        // Ensure index is within range\r\n        if (index > -1 && index < this.state.meaning.length) {\r\n            // Scroll to index\r\n            this.flatList.scrollToIndex({animated: animated, index: index});\r\n        } \r\n    }\r\n\r\n    // Update data function\r\n    updateData = () => {\r\n        this.setState({meaning: JSON.parse(JSON.stringify(this.props.data))});\r\n    }\r\n\r\n    onViewableItemsChanged = ({ viewableItems }) => {\r\n        // Update index changed\r\n        this.setState({ meaningIndex: viewableItems[0].index });\r\n        this.props.onMeaningIndexChange(viewableItems[0].index);\r\n\r\n        // Autofocus\r\n        if (this.props.autofocus && viewableItems.length <= 1) {\r\n            // MeaningTextInput\r\n            if (this.meaningHasFocus) this[`meaningTextInput${viewableItems[0].index}`].focus();\r\n            // ClassificationTextInput\r\n            else if (this.classificationHasFocus) this[`classificationTextInput${viewableItems[0].index}`].focus();            \r\n        }\r\n    }\r\n\r\n    onMeaningTextFocus = () => {\r\n        this.props.onMeaningTextFocus ? this.props.onMeaningTextFocus() : null;\r\n        this.meaningHasFocus = true;\r\n    }\r\n\r\n    onMeaningTextBlur = () => {\r\n        this.props.onMeaningTextBlur ? this.props.onMeaningTextBlur() : null;\r\n        this.meaningHasFocus = false;\r\n    }\r\n\r\n    onClassificationTextFocus = () => {\r\n        this.props.onClassificationTextFocus ? this.props.onClassificationTextFocus() : null;\r\n        this.classificationHasFocus = true;\r\n    }\r\n\r\n    onClassificationTextBlur = () => {\r\n        this.props.onClassificationTextBlur ? this.props.onClassificationTextBlur() : null;\r\n        this.classificationHasFocus = false;\r\n    }\r\n\r\n    onMeaningTextChange = (text, index) => {\r\n        meaning = this.state.meaning;\r\n        meaning[index].meaning_text = text;\r\n\r\n        if (index == meaning.length-1) {\r\n            if (meaning[index].meaning_text != \"\" && meaning[index].meaning_text != undefined) {\r\n                meaning = meaning.concat({meaning_id: undefined, meaning_text: undefined, meaning_classification: undefined, meaning_datetimecreated: undefined});\r\n            }\r\n        } else {\r\n            // Fix: This method implemented causes confusion in the user as the user keeps backspacing\r\n            if (meaning[index].meaning_text == \"\" || meaning[index].meaning_text == undefined) {\r\n                meaning.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        this.setState({meaning: JSON.parse(JSON.stringify(meaning))});\r\n        this.props.onMeaningTextChange ? this.props.onMeaningTextChange(text, index) : null;\r\n    }\r\n\r\n    onClassificationTextChange = (text, index) => {\r\n        meaning = this.state.meaning;\r\n        meaning[index].meaning_classification = text;\r\n        this.setState({ meaning: meaning });\r\n        this.props.onClassificationTextChange ? this.props.onClassificationTextChange(text, index) : null;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <View style={styles.container} onLayout={(event) => {\r\n                // Retrieve width value so as to adjust the item column width\r\n                var {_, _, width, _} = event.nativeEvent.layout;\r\n                this.itemWidth = width;\r\n            }}>\r\n            <FlatList\r\n                ref={(ref) => { this.flatList = ref }}\r\n                keyboardShouldPersistTaps=\"always\"\r\n                horizontal\r\n                pagingEnabled\r\n                style={styles.container}\r\n                showsHorizontalScrollIndicator={false}\r\n                data={this.state.meaning}\r\n                renderItem={this._renderMeaningColumn}\r\n                onViewableItemsChanged={this.onViewableItemsChanged}\r\n                keyExtractor={(item, index) => index.toString()}\r\n                listKey={(item, index) => index.toString()}\r\n            />\r\n            </View>\r\n        )\r\n    }\r\n\r\n    _renderMeaningColumn = ({item, index}) => {\r\n        return(\r\n            <View style={[styles.container]}>\r\n                <TextInput\r\n                    multiline\r\n                    ref={ref => this[`meaningTextInput${index}`] = ref}\r\n                    hasFocus={false}\r\n                    style={[styles.meaningTextInput, {width: this.itemWidth ? this.itemWidth : null, paddingRight: this.itemPaddingRight}]}\r\n                    placeholder=\"Meaning of word\"\r\n                    value={item.meaning_text}\r\n                    onFocus={this.onMeaningTextFocus}\r\n                    onBlur={this.onMeaningTextBlur}\r\n                    onChangeText={(text) => this.onMeaningTextChange(text, index)}\r\n                />\r\n                <View style={styles.rowContainer}>\r\n                    <TextInput\r\n                        ref={ref => this[`classificationTextInput${index}`] = ref}\r\n                        blurOnSubmit={false}\r\n                        style={styles.classificationTextInput}\r\n                        placeholder=\"Classification\"\r\n                        value={item.meaning_classification}\r\n                        onFocus={this.onClassificationTextFocus}\r\n                        onBlur={this.onClassificationTextBlur}\r\n                        onChangeText={(text) => this.onClassificationTextChange(text, index)}\r\n                    />\r\n                    <TouchableOpacity onPress={() => this.props.toggleVisibility()} style={{borderRadius: 5, borderWidth: 1, borderColor: colors.default.blue, paddingVertical: 5, paddingHorizontal: 20}}>\r\n                        <Text style={{color: colors.default.blue, fontSize: 16}}>More Options</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n\r\n                <Modal>\r\n\r\n                </Modal>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MeaningForm;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    rowContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginVertical: 10,\r\n    },\r\n    meaningTextInput: {\r\n        flex: 1,\r\n        // Width is dynamic\r\n        textAlignVertical: 'top',\r\n        fontSize: 16,\r\n    },\r\n    classificationTextInput: {\r\n        flex: 1,\r\n        marginRight: 20,\r\n        fontSize: 16,\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}