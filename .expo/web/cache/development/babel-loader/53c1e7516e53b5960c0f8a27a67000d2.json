{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\src\\\\screens\\\\Settings.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { Icon } from 'react-native-elements';\nimport * as FileSystem from 'expo-file-system';\nimport Header from \"../components/Header\";\nimport database from \"../services/Database\";\nimport { colors, headerStyles } from \"../Styles\";\n\nvar SettingsScreen = function (_React$Component) {\n  _inherits(SettingsScreen, _React$Component);\n\n  var _super = _createSuper(SettingsScreen);\n\n  function SettingsScreen(props) {\n    _classCallCheck(this, SettingsScreen);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(SettingsScreen, [{\n    key: \"resetDatabase\",\n    value: function resetDatabase() {\n      database.resetDatabase();\n    }\n  }, {\n    key: \"downloadDictionaryDatabase\",\n    value: function downloadDictionaryDatabase() {\n      FileSystem.downloadAsync('https://github.com/rickkoh/watermelon/raw/master/databases/Dictionary.db', FileSystem.documentDirectory + \"SQLite/Dictionary.db\").then(function (_ref) {\n        var uri = _ref.uri;\n        console.log('Finished downloading to ', uri);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, React.createElement(Header, {\n        headerLeft: React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this.props.navigation.openDrawer();\n          },\n          style: headerStyles.headerButtonLeft,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }\n        }, React.createElement(Icon, {\n          name: \"menu\",\n          color: colors.default.primaryColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this.downloadDictionaryDatabase();\n        },\n        style: styles.addButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, \"Download Dictionary\")), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          database.resetDatabase();\n          DeviceEventEmitter.emit(\"database_changed\");\n        },\n        style: styles.addButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, \"Reset Database\")), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return database.printDatabaseLocation();\n        },\n        style: styles.addButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }, \"Print database location in console\")));\n    }\n  }]);\n\n  return SettingsScreen;\n}(React.Component);\n\nexport { SettingsScreen as default };\nvar styles = StyleSheet.create({\n  addButton: {\n    padding: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n    borderWidth: 1,\n    alignItems: 'center',\n    backgroundColor: '#2d89ef',\n    borderColor: '#ffffff'\n  }\n});","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/screens/Settings.js"],"names":["React","Icon","FileSystem","Header","database","colors","headerStyles","SettingsScreen","props","resetDatabase","downloadAsync","documentDirectory","then","uri","console","log","catch","err","flex","navigation","openDrawer","headerButtonLeft","default","primaryColor","downloadDictionaryDatabase","styles","addButton","color","DeviceEventEmitter","emit","printDatabaseLocation","Component","StyleSheet","create","padding","paddingHorizontal","borderRadius","borderWidth","alignItems","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, FlatList, Image, Text, View, TouchableOpacity, DeviceEventEmitter } from 'react-native';\r\nimport { Icon } from 'react-native-elements';\r\nimport * as FileSystem from 'expo-file-system';\r\n\r\nimport Header from '../components/Header';\r\n\r\nimport database from '../services/Database';\r\n\r\nimport { colors, headerStyles } from '../Styles';\r\n\r\nexport default class SettingsScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // Reset Database\r\n    resetDatabase() {\r\n        database.resetDatabase();\r\n    }\r\n\r\n    // Download Dictionary Database\r\n    downloadDictionaryDatabase() {\r\n        FileSystem.downloadAsync('https://github.com/rickkoh/watermelon/raw/master/databases/Dictionary.db', FileSystem.documentDirectory + \"SQLite/Dictionary.db\")\r\n            .then(({uri}) => {\r\n                console.log('Finished downloading to ', uri);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    // Render\r\n    render() {\r\n        return(\r\n            <View style={{flex: 1}}>\r\n                <Header\r\n                    headerLeft={\r\n                        <TouchableOpacity\r\n                            onPress={() => this.props.navigation.openDrawer()}\r\n                            style={headerStyles.headerButtonLeft}>\r\n                            <Icon name='menu' color={colors.default.primaryColor}/>\r\n                        </TouchableOpacity>\r\n                    }\r\n                />\r\n                <TouchableOpacity onPress={() => this.downloadDictionaryDatabase()} style={styles.addButton}>\r\n                    <Text style={{color: \"white\"}}>Download Dictionary</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={() => {database.resetDatabase(); DeviceEventEmitter.emit(\"database_changed\")}} style={styles.addButton}>\r\n                    <Text style={{color: \"white\"}}>Reset Database</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={() => database.printDatabaseLocation()} style={styles.addButton}>\r\n                    <Text style={{color: \"white\"}}>Print database location in console</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    addButton:{\r\n        padding: 10,\r\n        paddingHorizontal: 20,\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        alignItems: 'center',\r\n        backgroundColor: '#2d89ef',\r\n        borderColor: '#ffffff',\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}