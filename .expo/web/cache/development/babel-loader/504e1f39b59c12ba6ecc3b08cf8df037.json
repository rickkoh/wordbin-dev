{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\src\\\\components\\\\EditableWordCardModal.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SCREEN_HEIGHT, colors } from \"../Styles\";\nimport Modal from 'react-native-modal';\nimport PillButton from \"./Buttons/PillButton\";\nimport MeaningInformation from \"../components/Information/MeaningInformation\";\nimport HorizontalList from \"./HorizontalList\";\nimport WordInput from \"../components/Forms/WordInput\";\nimport PronunciationInput from \"../components/Forms/PronunciationInput\";\nimport MeaningForm from \"../components/Forms/MeaningForm\";\nimport TagForm from \"../components/Forms/TagForm\";\nimport database from \"../services/Database\";\nimport Tag from \"../components/Tag\";\n\nvar EditableWordCardModal = function (_React$Component) {\n  _inherits(EditableWordCardModal, _React$Component);\n\n  var _super = _createSuper(EditableWordCardModal);\n\n  function EditableWordCardModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditableWordCardModal);\n\n    _this = _super.call(this, props);\n\n    _this.setIsEditable = function (value) {\n      value ? _this.setState({\n        isEditable: value\n      }) : _this.setState({\n        isEditable: true\n      });\n    };\n\n    _this.onBackdropPress = function () {\n      if (_this.state.isEdited) {\n        console.log(\"Detects word edited.\");\n      }\n\n      _this.props.onBackdropPress ? _this.props.onBackdropPress() : null;\n    };\n\n    _this.onEditButtonPress = function () {\n      _this.setState({\n        isEditable: true\n      });\n\n      _this.props.onEditButtonPress ? _this.props.onEditButtonPress() : null;\n    };\n\n    _this.onCancelButtonPress = function () {\n      _this.setState({\n        isEditable: false\n      });\n\n      _this.props.onCancelButtonPress ? _this.props.onCancelButtonPress() : null;\n    };\n\n    _this.onDoneButtonPress = function () {\n      if (_this.state.isEditable && _this.state.isEdited) {\n        _this.updateData();\n\n        _this.props.onWordDataHasChanged ? _this.props.onWordDataHasChanged(_this.state.word) : null;\n      }\n\n      _this.props.onDoneButtonPress ? _this.props.onDoneButtonPress() : null;\n    };\n\n    _this.updateData = function () {\n      function asyncForEach(array, callback) {\n        var index;\n        return _regeneratorRuntime.async(function asyncForEach$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                index = 0;\n\n              case 1:\n                if (!(index < array.length)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(callback(array[index], index, array));\n\n              case 4:\n                index++;\n                _context.next = 1;\n                break;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n\n      databaseChanged = false;\n      database.updateWord(_this.state.word.word_id, _this.state.word.word_text).then(function (rowsAffected) {\n        if (rowsAffected !== undefined && rowsAffected > 0) {\n          databaseChanged = true;\n        }\n      });\n      asyncForEach(_this.state.word.Meanings, function _callee(meaning, index) {\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this.state.word.Meanings[index] != meaning)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(database.updateMeaningText(meaning.meaning_id, meaning.meaning_text).then(function (rowsAffected) {\n                  if (rowsAffected !== undefined && rowsAffected > 0) {\n                    databaseChanged = true;\n                  }\n                }));\n\n              case 3:\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(database.updateMeaningClassification(meaning.meaning_id, meaning.meaning_classification).then(function (rowsAffected) {\n                  if (rowsAffected !== undefined && rowsAffected > 0) {\n                    databaseChanged = true;\n                  }\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n      if (databaseChanged) DeviceEventEmitter.emit(\"database_changed\");\n    };\n\n    _this.renderModalContent = function () {\n      if (!_this.state.isEditable) {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: styles.header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this.onEditButtonPress();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 18,\n            color: colors.default.blue\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }\n        }, \"Edit\")), React.createElement(PillButton, {\n          text: \"Done\",\n          onPress: function onPress() {\n            return _this.onDoneButtonPress();\n          },\n          style: {\n            marginBottom: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }\n        })), React.createElement(ScrollView, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 22\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }\n        }, _this.props.word.word_text), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }\n        }, _this.props.word.word_pronunciation), React.createElement(MeaningInformation, {\n          data: _this.props.word.Meanings,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }\n        }), React.createElement(HorizontalList, {\n          headerText: \"Tags\",\n          headerStyle: {\n            margin: 5,\n            marginLeft: 0\n          },\n          headerTextStyle: {\n            color: 'green'\n          },\n          data: _this.props.word.Tags,\n          renderItem: function renderItem(tag, index) {\n            return React.createElement(View, {\n              style: {\n                margin: 5,\n                marginLeft: 0\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 33\n              }\n            }, React.createElement(Tag, {\n              value: tag.tag_title,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 37\n              }\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }\n        })));\n      } else {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: styles.header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 21\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this.onCancelButtonPress();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: styles.cancelButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 29\n          }\n        }, \"Cancel\")), React.createElement(PillButton, {\n          text: \"Done\",\n          onPress: function onPress() {\n            return _this.onDoneButtonPress();\n          },\n          style: {\n            marginBottom: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }\n        })), React.createElement(ScrollView, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }\n        }, React.createElement(WordInput, {\n          value: _this.state.word.word_text,\n          onChangeText: function onChangeText(text) {\n            return _this.setState(function (prevState) {\n              return {\n                word: _objectSpread({}, prevState.word, {\n                  word_text: text\n                })\n              };\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }\n        }), React.createElement(PronunciationInput, {\n          value: _this.state.word.word_pronunciation,\n          onChangeText: function onChangeText(text) {\n            return _this.setState(function (prevState) {\n              return {\n                word: _objectSpread({}, prevState.word, {\n                  word_pronunciation: text\n                })\n              };\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }\n        }), React.createElement(MeaningForm, {\n          autofocus: true,\n          data: _this.state.word.Meanings,\n          onMeaningIndexChange: function onMeaningIndexChange() {\n            return console.log('Meaning index changed.');\n          },\n          onMeaningDataChange: function onMeaningDataChange(meaning) {\n            console.log(\"Meaning data changed.\");\n            word = _this.state.word;\n            word.Meanings = meaning;\n\n            _this.setState({\n              word: JSON.parse(JSON.stringify(word))\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }\n        }), React.createElement(TagForm, {\n          data: _this.state.word.Tags,\n          onTagDataChange: function onTagDataChange(tag) {\n            console.log(tag);\n\n            _this.setState(function (prevState) {\n              return {\n                word: _objectSpread({}, prevState.word, {\n                  Tags: tag\n                })\n              };\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }\n        })));\n      }\n    };\n\n    _this.state = {\n      isVisible: false,\n      isEditable: false,\n      isEdited: false,\n      word: JSON.parse(JSON.stringify(_this.props.word))\n    };\n    return _this;\n  }\n\n  _createClass(EditableWordCardModal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.word != prevState.word && !this.state.isEdited && this.state.isEditable) this.setState({\n        isEdited: true\n      });\n\n      if (this.state.word != prevState.word) {\n        console.log(\"Word data changed.\");\n        this.props.onWordDataChange ? this.props.onWordDataChange(this.state.word) : null;\n      }\n\n      if (!this.props.isVisible && this.props.isVisible != prevProps.isVisible) {\n        console.log(\"Resetting\");\n        this.state = {\n          isEditable: false,\n          isEdited: false,\n          word: JSON.parse(JSON.stringify(this.props.word))\n        };\n        this.setState(this.state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Modal, {\n        onBackdropPress: function onBackdropPress() {\n          return _this2.onBackdropPress();\n        },\n        isVisible: this.props.isVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }\n      }, this.renderModalContent());\n    }\n  }]);\n\n  return EditableWordCardModal;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    marginHorizontal: 20,\n    marginVertical: SCREEN_HEIGHT * 0.1,\n    borderRadius: 20,\n    padding: 20\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  cancelButton: {\n    fontSize: 18,\n    color: colors.default.blue\n  }\n});\nexport default EditableWordCardModal;","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/components/EditableWordCardModal.js"],"names":["React","SCREEN_HEIGHT","colors","Modal","PillButton","MeaningInformation","HorizontalList","WordInput","PronunciationInput","MeaningForm","TagForm","database","Tag","EditableWordCardModal","props","setIsEditable","value","setState","isEditable","onBackdropPress","state","isEdited","console","log","onEditButtonPress","onCancelButtonPress","onDoneButtonPress","updateData","onWordDataHasChanged","word","asyncForEach","array","callback","index","length","databaseChanged","updateWord","word_id","word_text","then","rowsAffected","undefined","Meanings","meaning","updateMeaningText","meaning_id","meaning_text","updateMeaningClassification","meaning_classification","DeviceEventEmitter","emit","renderModalContent","styles","container","header","fontSize","color","default","blue","marginBottom","word_pronunciation","margin","marginLeft","Tags","tag","tag_title","cancelButton","text","prevState","JSON","parse","stringify","isVisible","prevProps","onWordDataChange","Component","StyleSheet","create","flex","backgroundColor","marginHorizontal","marginVertical","borderRadius","padding","flexDirection","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { DeviceEventEmitter, View, StyleSheet, Text, TouchableOpacity, ScrollView } from 'react-native';\r\n\r\nimport { SCREEN_HEIGHT, colors } from '../Styles';\r\n\r\nimport Modal from 'react-native-modal';\r\nimport PillButton from './Buttons/PillButton';\r\n\r\nimport MeaningInformation from '../components/Information/MeaningInformation';\r\nimport HorizontalList from './HorizontalList';\r\n\r\nimport WordInput from '../components/Forms/WordInput';\r\nimport PronunciationInput from '../components/Forms/PronunciationInput';\r\nimport MeaningForm from '../components/Forms/MeaningForm';\r\nimport TagForm from '../components/Forms/TagForm';\r\nimport database from '../services/Database';\r\n\r\nimport Tag from '../components/Tag';\r\n\r\nclass EditableWordCardModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Props\r\n        // isEditable\r\n        // isVisible\r\n        // onBackdropPress\r\n\r\n        this.state = {\r\n            isVisible: false,\r\n            isEditable: false,\r\n            isEdited: false,\r\n            word: JSON.parse(JSON.stringify(this.props.word)),\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Update isEdited state if word is edited\r\n        // CONDITION: Word isn't the same as before AND isEdited is still false AND word can be edited (isEditable is true)\r\n        if (this.state.word != prevState.word && !this.state.isEdited && this.state.isEditable) this.setState({isEdited: true});\r\n\r\n        // Call onWordDataChange function is word isn't the same as before\r\n        if (this.state.word != prevState.word) {\r\n            // Can remove\r\n            console.log(\"Word data changed.\");\r\n            this.props.onWordDataChange ? this.props.onWordDataChange(this.state.word) : null;\r\n        }\r\n\r\n        // Modal state is defined as 'destroyed' when it is no longer visible\r\n        // Reset properties back to default\r\n        if (!this.props.isVisible && this.props.isVisible != prevProps.isVisible) {\r\n\r\n            // Can remove\r\n            console.log(\"Resetting\");\r\n\r\n            // Default states (same as the one in constructor)\r\n            this.state = {\r\n                isEditable: false,\r\n                isEdited: false,\r\n                word: JSON.parse(JSON.stringify(this.props.word)),\r\n            }\r\n\r\n            this.setState(this.state);\r\n        }\r\n    }\r\n\r\n    setIsEditable = (value) => {\r\n        value ? this.setState({isEditable: value}) : this.setState({isEditable: true})\r\n    }\r\n\r\n    // Handles onBackdropPress\r\n    onBackdropPress = () => {\r\n        if (this.state.isEdited) {\r\n            // Can remove\r\n            console.log(\"Detects word edited.\");\r\n            // Prompts user if he/she wants to save changes\r\n        }\r\n        this.props.onBackdropPress ? this.props.onBackdropPress() : null;\r\n    }\r\n\r\n    // Handles onEditButtonPress\r\n    onEditButtonPress = () => {\r\n        this.setState({isEditable: true})\r\n        this.props.onEditButtonPress ? this.props.onEditButtonPress() : null;\r\n    }\r\n\r\n    // Handles onCancelButtonPress\r\n    onCancelButtonPress = () => {\r\n        this.setState({isEditable: false});\r\n        this.props.onCancelButtonPress ? this.props.onCancelButtonPress() : null;\r\n    }\r\n\r\n    // Handles onDoneButtonPress\r\n    onDoneButtonPress = () => {\r\n        // Function shouldn't be executed\r\n        if (this.state.isEditable && this.state.isEdited) {\r\n            this.updateData();\r\n            this.props.onWordDataHasChanged ? this.props.onWordDataHasChanged(this.state.word) : null;\r\n        }\r\n        this.props.onDoneButtonPress ? this.props.onDoneButtonPress() : null;\r\n    }\r\n\r\n    // Update the word data to the database\r\n    // Question: how to deal with extra data coming in.\r\n    updateData = () => {\r\n        async function asyncForEach(array, callback) {\r\n            for (let index = 0; index < array.length; index++) {\r\n                await callback(array[index], index, array);\r\n            }\r\n        }\r\n\r\n        databaseChanged = false;\r\n\r\n        // Update word\r\n        database.updateWord(this.state.word.word_id, this.state.word.word_text).then(rowsAffected => {\r\n            if (rowsAffected !== undefined && rowsAffected > 0) {\r\n                databaseChanged = true;\r\n            }\r\n        });\r\n\r\n        // Update meaning\r\n        asyncForEach(this.state.word.Meanings, async (meaning, index) => {\r\n            // Check if meaning object changed\r\n            if (this.state.word.Meanings[index] != meaning) {\r\n                // Update meaning text\r\n                await database.updateMeaningText(meaning.meaning_id, meaning.meaning_text).then(rowsAffected => {\r\n                    if (rowsAffected !== undefined && rowsAffected > 0) {\r\n                        databaseChanged = true;\r\n                    }\r\n                });\r\n                // Update meaning classification\r\n                await database.updateMeaningClassification(meaning.meaning_id, meaning.meaning_classification).then(rowsAffected => {\r\n                    if (rowsAffected !== undefined && rowsAffected > 0) {\r\n                        databaseChanged = true;\r\n                    }\r\n                })\r\n                // Update meaning sentence example\r\n                // Update meaning meaning synonyms\r\n            }\r\n        });\r\n\r\n        if (databaseChanged) DeviceEventEmitter.emit(\"database_changed\");\r\n    }\r\n\r\n    // Render modal content based on editable\r\n    renderModalContent = () => {\r\n        if (!this.state.isEditable) {\r\n            // Render normal WordCardModal\r\n            // Uses data from prop\r\n            return (\r\n                <View style={styles.container}>\r\n                    <View style={styles.header}>\r\n                        <TouchableOpacity onPress={() => this.onEditButtonPress()}>\r\n                            <Text style={{fontSize: 18, color: colors.default.blue}}>Edit</Text>\r\n                        </TouchableOpacity>\r\n                        <PillButton\r\n                            text=\"Done\"\r\n                            onPress={() => this.onDoneButtonPress()}\r\n                            style={{marginBottom: 10}}\r\n                        />\r\n                    </View>\r\n                    <ScrollView>\r\n                        <Text style={{fontSize: 22}}>{this.props.word.word_text}</Text>\r\n                        <Text>{this.props.word.word_pronunciation}</Text>\r\n                        <MeaningInformation\r\n                            data={this.props.word.Meanings}\r\n                        />\r\n                        <HorizontalList\r\n                            headerText=\"Tags\"\r\n                            headerStyle={{margin: 5, marginLeft: 0}}\r\n                            headerTextStyle={{color: 'green'}}\r\n                            data={this.props.word.Tags}\r\n                            renderItem={(tag, index) => (\r\n                                <View style={{margin: 5, marginLeft: 0}}>\r\n                                    <Tag value={tag.tag_title}/>\r\n                                </View>\r\n                            )}\r\n                        />\r\n                    </ScrollView>\r\n                </View>\r\n            )\r\n        } else {\r\n            // Render editable WordCardModal\r\n            // Uses data from state\r\n            return (\r\n                <View style={styles.container}>\r\n                    {\r\n                        // Header\r\n                    }\r\n                    <View style={styles.header}>\r\n                        <TouchableOpacity onPress={() => this.onCancelButtonPress()}>\r\n                            <Text style={styles.cancelButton}>Cancel</Text>\r\n                        </TouchableOpacity>\r\n                        <PillButton\r\n                            text=\"Done\"\r\n                            onPress={() => this.onDoneButtonPress()}\r\n                            style={{marginBottom: 10}}\r\n                        />\r\n                    </View>\r\n                    <ScrollView>\r\n                        <WordInput\r\n                            value={this.state.word.word_text}\r\n                            onChangeText={(text) => this.setState((prevState) => ({word: { ...prevState.word, word_text: text}}))}\r\n                        />\r\n                        <PronunciationInput\r\n                            value={this.state.word.word_pronunciation}\r\n                            onChangeText={(text) => this.setState((prevState) => ({word: { ...prevState.word, word_pronunciation: text}}))}\r\n                        />\r\n                        <MeaningForm\r\n                            autofocus\r\n                            data={this.state.word.Meanings}\r\n                            onMeaningIndexChange={() => console.log('Meaning index changed.')}\r\n                            onMeaningDataChange={(meaning) =>  {\r\n                                console.log(\"Meaning data changed.\");\r\n                                word = this.state.word;\r\n                                word.Meanings = meaning;\r\n                                this.setState({word: JSON.parse(JSON.stringify(word))})\r\n                            }}\r\n                        />\r\n                        <TagForm\r\n                            data={this.state.word.Tags}\r\n                            onTagDataChange={(tag) => {\r\n                                console.log(tag);\r\n                                this.setState((prevState) => ({word: { ...prevState.word, Tags: tag}}))}\r\n                            }\r\n                        />\r\n                    </ScrollView>\r\n                </View>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal\r\n                onBackdropPress={() => this.onBackdropPress()}\r\n                isVisible={this.props.isVisible}\r\n            >\r\n                {\r\n                    // Modal container\r\n                }\r\n                {this.renderModalContent()}\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'white',\r\n        marginHorizontal: 20,\r\n        marginVertical: SCREEN_HEIGHT*0.1,\r\n        borderRadius: 20,\r\n        padding: 20\r\n    },\r\n    header: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    cancelButton: {\r\n        fontSize: 18,\r\n        color: colors.default.blue\r\n    }\r\n})\r\n\r\nexport default EditableWordCardModal;"]},"metadata":{},"sourceType":"module"}