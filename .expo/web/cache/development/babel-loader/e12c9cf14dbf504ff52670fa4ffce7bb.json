{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\src\\\\screens\\\\AddWord.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { Icon } from 'react-native-elements';\nimport Modal from 'react-native-modal';\nimport { colors, headerStyles, SCREEN_HEIGHT, SCREEN_WIDTH } from \"../Styles\";\nimport Header from \"../components/Header\";\nimport PillButton from \"../components/Buttons/PillButton\";\nimport WordInput from \"../components/Forms/WordInput\";\nimport PronunciationInput from \"../components/Forms/PronunciationInput\";\nimport MeaningForm from \"../components/Forms/MeaningForm\";\nimport TagForm from \"../components/Forms/TagForm\";\nimport MeaningFormModal from \"../components/Forms/MeaningFormModal\";\nimport database from \"../services/Database\";\n\nvar AddWordScreen = function (_React$Component) {\n  _inherits(AddWordScreen, _React$Component);\n\n  var _super = _createSuper(AddWordScreen);\n\n  function AddWordScreen(props) {\n    var _this;\n\n    _classCallCheck(this, AddWordScreen);\n\n    _this = _super.call(this, props);\n\n    _this.handleMeaningSentenceExampleChange = function (text, index) {\n      meaning = _this.state.meaning;\n      meaning[index].sentenceexample;\n    };\n\n    _this.removeMeaning = function () {\n      meaning = _this.state.meaning;\n      meaning.splice(_this.state.meaningCurrentIndex, 1);\n\n      _this.setState({\n        meaning: meaning\n      });\n    };\n\n    _this.handleOriginChange = function (text) {\n      _this.state.word.word_origin = text;\n\n      _this.setState({\n        word: _this.state.word\n      });\n    };\n\n    _this.toggleMeaningModalVisibility = function () {\n      console.log('toggling');\n\n      _this.setState(function (prevState) {\n        return {\n          isMeaningModalVisible: !prevState.isMeaningModalVisible\n        };\n      });\n    };\n\n    _this.toggleAPIModalVisibility = function () {\n      _this.setState(function (prevState) {\n        return {\n          isAPIModalVisible: !prevState.isAPIModalVisible\n        };\n      });\n    };\n\n    _this.meaningCurrentIndexChanged = function (index) {\n      _this.setState({\n        meaningCurrentIndex: index\n      });\n    };\n\n    _this.apiButtonPressed = function () {\n      NetInfo.fetch().then(function (connectionInfo) {\n        if (connectionInfo.type != 'none') {\n          word = _this.state.word.word_text.split(\" \").join(\"-\");\n          console.log(word);\n          fetch('https://googledictionaryapi.eu-gb.mybluemix.net/?define=' + word).then(function (response) {\n            return response.json();\n          }).then(function (responseJson) {\n            _this.openAPIModal(responseJson);\n          }).catch(function (error) {\n            console.log(error);\n          });\n        }\n      });\n    };\n\n    _this.openAPIModal = function (responseJson) {\n      _this.toggleAPIModalVisibility();\n\n      Word = {};\n      Meaning = [];\n      console.log(responseJson);\n      responseJson.forEach(function (word) {\n        Word.word_text = word[\"word\"];\n        Word.word_pronunciation = word[\"phonetic\"];\n        Word.word_origin = word[\"origin\"];\n\n        for (var classification in word[\"meaning\"]) {\n          word[\"meaning\"][classification].forEach(function (meaning) {\n            Meaning.push({\n              meaning_text: meaning[\"definition\"],\n              meaning_classification: classification\n            });\n          });\n        }\n      });\n\n      _this.setState({\n        apiWord: Word,\n        apiMeaning: Meaning\n      });\n\n      console.log(_this.state.apiWord);\n    };\n\n    _this.clearButtonPressed = function () {\n      console.log(_this.state.keyboardBarType);\n      if (_this.state.keyboardBarType == \"word\") _this.setState(function (prevState) {\n        return {\n          word: _objectSpread({}, prevState.word, {\n            word_text: undefined\n          })\n        };\n      });else if (_this.state.keyboardBarType == \"pronunciation\") _this.setState(function (prevState) {\n        return {\n          word: _objectSpread({}, prevState.word, {\n            word_pronunciation: undefined\n          })\n        };\n      });else if (_this.state.keyboardBarType == \"meaning\") {\n        if (_this.state.meaningCurrentIndex == _this.state.meaning.length - 1) {\n          meaning = _this.state.meaning;\n          meaning[_this.state.meaningCurrentIndex].meaning_text = undefined;\n\n          _this.setState({\n            meaning: meaning\n          });\n        } else {\n          _this.removeMeaning();\n        }\n      } else if (_this.state.keyboardBarType == \"classification\") {\n        meaning = _this.state.meaning;\n        meaning[_this.state.meaningCurrentIndex].meaning_classification = undefined;\n\n        _this.setState({\n          meaning: meaning\n        });\n      }\n    };\n\n    _this.addButtonPressed = function () {\n      function asyncForEach(array, callback) {\n        var index;\n        return _regeneratorRuntime.async(function asyncForEach$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                index = 0;\n\n              case 1:\n                if (!(index < array.length)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(callback(array[index], index, array));\n\n              case 4:\n                index++;\n                _context.next = 1;\n                break;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n\n      Word = _this.state.word;\n      Meanings = _this.state.meaning;\n      Tag = _this.state.tags;\n      database.addWord(Word).then(function _callee5(word_id) {\n        return _regeneratorRuntime.async(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _regeneratorRuntime.awrap(asyncForEach(Meanings, function _callee(meaning) {\n                  return _regeneratorRuntime.async(function _callee$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          meaning.meaning_word_id = word_id;\n                          _context2.next = 3;\n                          return _regeneratorRuntime.awrap(database.addMeaning(meaning).catch(function (error) {\n                            return console.log(error);\n                          }));\n\n                        case 3:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }));\n\n              case 2:\n                _context6.next = 4;\n                return _regeneratorRuntime.awrap(asyncForEach(Tag, function _callee4(tag) {\n                  return _regeneratorRuntime.async(function _callee4$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return _regeneratorRuntime.awrap(database.getTag(tag.tag_title).then(function _callee3(data) {\n                            return _regeneratorRuntime.async(function _callee3$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    if (!(data.length > 0)) {\n                                      _context4.next = 5;\n                                      break;\n                                    }\n\n                                    _context4.next = 3;\n                                    return _regeneratorRuntime.awrap(database.addWordTag(word_id, data[0].tag_id).catch(function (error) {\n                                      return console.log(error);\n                                    }));\n\n                                  case 3:\n                                    _context4.next = 7;\n                                    break;\n\n                                  case 5:\n                                    _context4.next = 7;\n                                    return _regeneratorRuntime.awrap(database.addTag(tag).then(function _callee2(tag_id) {\n                                      return _regeneratorRuntime.async(function _callee2$(_context3) {\n                                        while (1) {\n                                          switch (_context3.prev = _context3.next) {\n                                            case 0:\n                                              _context3.next = 2;\n                                              return _regeneratorRuntime.awrap(database.addWordTag(word_id, tag_id).catch(function (error) {\n                                                return console.log(error);\n                                              }));\n\n                                            case 2:\n                                            case \"end\":\n                                              return _context3.stop();\n                                          }\n                                        }\n                                      }, null, null, null, Promise);\n                                    }).catch(function (error) {\n                                      return console.log(error);\n                                    }));\n\n                                  case 7:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, null, null, null, Promise);\n                          }).catch(function (error) {\n                            return console.log(error);\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }).catch(function (error) {\n        return console.log(error);\n      }).then(function () {\n        return _this.props.navigation.goBack();\n      });\n    };\n\n    _this.test = function () {\n      console.log(_this.state);\n\n      _this.setState({\n        isMeaningModalVisible: true\n      });\n    };\n\n    _this.insertAPIDataButtonPressed = function () {\n      Word = _this.state.apiWord;\n      Word.word_text = _this.state.word.word_text;\n      Meaning = _this.state.apiMeaning;\n\n      _this.setState({\n        word: Word,\n        meaning: Meaning,\n        isAPIModalVisible: false\n      }, function () {\n        _this.meaningForm.updateData();\n      });\n    };\n\n    _this.renderKeyboardBar = function () {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: _this.apiButtonPressed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }\n      }, React.createElement(Icon, {\n        name: \"google\",\n        type: \"antdesign\",\n        color: colors.default.blue,\n        opacity: _this.state.wordHasAPIdata ? 1 : 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: {\n          marginRight: 15\n        },\n        onPress: function onPress() {\n          return _this.clearButtonPressed();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 16,\n          color: colors.default.blue\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 25\n        }\n      }, \"Clear\"))), React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this.meaningForm.scrollToIndex(_this.state.meaningCurrentIndex - 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }\n      }, React.createElement(Icon, {\n        name: \"chevron-left\",\n        color: colors.default.blue,\n        size: 22,\n        opacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }\n      })), React.createElement(Text, {\n        style: {\n          fontSize: 16,\n          color: colors.default.blue\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }\n      }, _this.state.meaningCurrentIndex + 1, \"/\", _this.state.meaning.length), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this.meaningForm.scrollToIndex(_this.state.meaningCurrentIndex + 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }\n      }, React.createElement(Icon, {\n        name: \"chevron-right\",\n        color: colors.default.blue,\n        size: 22,\n        opacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 17\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this.test();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }\n      }, React.createElement(Icon, {\n        name: \"add\",\n        color: colors.default.blue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }\n      }))));\n    };\n\n    _this.renderMeaning = function (_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      synonym = [{\n        text: \"Synonyms:\"\n      }];\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          marginBottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          marginRight: 60\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 17\n        }\n      }, item.meaning_classification == undefined ? null : React.createElement(Text, {\n        style: {\n          fontSize: 12,\n          marginBottom: 5,\n          color: 'gray'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 25\n        }\n      }, item.meaning_classification), React.createElement(Text, {\n        style: {\n          fontSize: 14,\n          marginBottom: 7.5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 21\n        }\n      }, item.meaning_text)), React.createElement(View, {\n        style: {\n          backgroundColor: 'pink'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    _this.state = {\n      word: {\n        word_id: undefined,\n        word_text: undefined,\n        word_pronunciation: undefined,\n        word_origin: undefined,\n        word_datetimeadded: undefined\n      },\n      meaning: [{\n        meaning_id: undefined,\n        meaning_text: undefined,\n        meaning_classification: undefined,\n        meaning_datetimecreated: undefined\n      }],\n      meaningsentence: [{\n        meaningsentence_id: undefined,\n        meaningsentence_meaning_id: undefined,\n        meaningsentence_text: undefined,\n        meaningsentence_datetimecreated: undefined\n      }],\n      tags: [],\n      apiWord: {\n        word_text: \"\"\n      },\n      meaningCurrentIndex: 0,\n      keyboardBarType: undefined,\n      wordIsValidated: false,\n      wordHasAPIdata: false,\n      datetimeadded: undefined,\n      isValidated: false\n    };\n    return _this;\n  }\n\n  _createClass(AddWordScreen, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.word.word_text != undefined && this.state.word.word_text != \"\" && this.state.word.word_text.length <= 64) {\n        if (prevState.isValidated != true) this.setState({\n          isValidated: true\n        });\n      } else {\n        if (prevState.isValidated != false) this.setState({\n          isValidated: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.wordInput.focus();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      DeviceEventEmitter.emit(\"database_changed\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.keyboardContainer,\n        behavior: \"padding\",\n        enabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }\n      }, React.createElement(Header, {\n        headerLeft: React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this2.props.navigation.goBack();\n          },\n          style: headerStyles.headerButtonLeft,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          numberOfLines: 1,\n          style: {\n            color: colors.default.blue,\n            fontSize: 16\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }\n        }, \"Cancel\")),\n        headerTitle: React.createElement(Text, {\n          style: headerStyles.headerTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }\n        }, this.props.title),\n        headerRight: React.createElement(PillButton, {\n          text: \"Add\",\n          style: headerStyles.headerButtonRight,\n          enabled: this.state.isValidated,\n          onPress: this.addButtonPressed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.formContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 17\n        }\n      }, React.createElement(WordInput, {\n        ref: function ref(_ref2) {\n          _this2.wordInput = _ref2;\n        },\n        value: this.state.word.word_text,\n        onChangeText: function onChangeText(text) {\n          return _this2.setState(function (prevState) {\n            return {\n              word: _objectSpread({}, prevState.word, {\n                word_text: text\n              })\n            };\n          });\n        },\n        onFocus: function onFocus() {\n          return _this2.setState({\n            keyboardBarType: 'word'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }\n      }), React.createElement(PronunciationInput, {\n        value: this.state.word.word_pronunciation,\n        onChangeText: function onChangeText(text) {\n          return _this2.setState(function (prevState) {\n            return {\n              word: _objectSpread({}, prevState.word, {\n                word_pronunciation: text\n              })\n            };\n          });\n        },\n        onFocus: function onFocus() {\n          return _this2.setState({\n            keyboardBarType: 'pronunciation'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }\n      }), React.createElement(MeaningForm, {\n        autofocus: true,\n        ref: function ref(_ref3) {\n          _this2.meaningForm = _ref3;\n        },\n        data: this.state.meaning,\n        onMeaningDataChange: function onMeaningDataChange(meaning) {\n          return _this2.setState({\n            meaning: meaning\n          });\n        },\n        onMeaningIndexChange: function onMeaningIndexChange(index) {\n          return _this2.meaningCurrentIndexChanged(index);\n        },\n        onMeaningTextFocus: function onMeaningTextFocus() {\n          return _this2.setState({\n            keyboardBarType: 'meaning'\n          });\n        },\n        onClassificationTextFocus: function onClassificationTextFocus() {\n          return _this2.setState({\n            keyboardBarType: 'classification'\n          });\n        },\n        toggleVisibility: this.toggleMeaningModalVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }\n      }), React.createElement(TagForm, {\n        data: this.state.tags,\n        onTagDataChange: function onTagDataChange(tags) {\n          return _this2.setState({\n            tags: tags\n          });\n        },\n        onFocus: function onFocus() {\n          return _this2.setState({\n            keyboardBarType: 'tag'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }\n      })), React.createElement(KeyboardBar, {\n        renderContent: this.renderKeyboardBar(),\n        enabled: this.state.isValidated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }\n      }), React.createElement(MeaningFormModal, {\n        meaning: this.state.meaning[this.state.meaningCurrentIndex],\n        keyboardBar: this.renderKeyboardBar(),\n        toggleVisibility: this.toggleMeaningModalVisibility,\n        isVisible: this.state.isMeaningModalVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 17\n        }\n      }), React.createElement(Modal, {\n        onSwipeComplete: this.toggleAPIModalVisibility,\n        isVisible: this.state.isAPIModalVisible,\n        onBackdropPress: function onBackdropPress() {\n          _this2.setState(function (prevState) {\n            return {\n              isAPIModalVisible: false\n            };\n          });\n        },\n        style: {\n          justifyContent: 'flex-end',\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          backgroundColor: colors.default.white,\n          borderTopStartRadius: 20,\n          borderTopEndRadius: 20,\n          padding: 20,\n          paddingTop: 0,\n          height: SCREEN_HEIGHT * 0.80\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 30,\n          maxWidth: SCREEN_WIDTH - 105\n        },\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 29\n        }\n      }, this.state.word.word_text), React.createElement(TouchableOpacity, {\n        style: {\n          marginLeft: 10,\n          marginRight: 5,\n          paddingVertical: 5\n        },\n        onPress: this.insertAPIDataButtonPressed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 29\n        }\n      }, React.createElement(Icon, {\n        name: \"arrow-up\",\n        type: \"material-community\",\n        size: \"20\",\n        color: colors.default.blue,\n        reverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 33\n        }\n      }))), React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 29\n        }\n      }, this.state.word.word_text), React.createElement(Text, {\n        style: {\n          marginBottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 29\n        }\n      }, this.state.apiWord !== 'undefeinfed' ? this.state.apiWord.word_pronunciation : \"\"), React.createElement(FlatList, {\n        data: this.state.apiMeaning,\n        renderItem: this.renderMeaning,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        listKey: function listKey(item, index) {\n          return index.toString();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 29\n        }\n      })))));\n    }\n  }]);\n\n  return AddWordScreen;\n}(React.Component);\n\nKeyboardBar = function KeyboardBar(props) {\n  return React.createElement(View, {\n    style: {\n      borderTopWidth: 1,\n      borderColor: '#f4f7f8',\n      height: 50,\n      alignItems: 'center',\n      paddingHorizontal: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  }, props.renderContent);\n};\n\nvar styles = StyleSheet.create({\n  keyboardContainer: {\n    flex: 1\n  },\n  formContainer: {\n    flex: 1,\n    paddingHorizontal: 20\n  }\n});\nexport default AddWordScreen;","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/screens/AddWord.js"],"names":["React","NetInfo","Icon","Modal","colors","headerStyles","SCREEN_HEIGHT","SCREEN_WIDTH","Header","PillButton","WordInput","PronunciationInput","MeaningForm","TagForm","MeaningFormModal","database","AddWordScreen","props","handleMeaningSentenceExampleChange","text","index","meaning","state","sentenceexample","removeMeaning","splice","meaningCurrentIndex","setState","handleOriginChange","word","word_origin","toggleMeaningModalVisibility","console","log","prevState","isMeaningModalVisible","toggleAPIModalVisibility","isAPIModalVisible","meaningCurrentIndexChanged","apiButtonPressed","fetch","then","connectionInfo","type","word_text","split","join","response","json","responseJson","openAPIModal","catch","error","Word","Meaning","forEach","word_pronunciation","classification","push","meaning_text","meaning_classification","apiWord","apiMeaning","clearButtonPressed","keyboardBarType","undefined","length","addButtonPressed","asyncForEach","array","callback","Meanings","Tag","tags","addWord","word_id","meaning_word_id","addMeaning","tag","getTag","tag_title","data","addWordTag","tag_id","addTag","navigation","goBack","test","insertAPIDataButtonPressed","meaningForm","updateData","renderKeyboardBar","flex","flexDirection","alignItems","default","blue","wordHasAPIdata","justifyContent","marginRight","fontSize","color","scrollToIndex","renderMeaning","item","synonym","marginBottom","backgroundColor","word_datetimeadded","meaning_id","meaning_datetimecreated","meaningsentence","meaningsentence_id","meaningsentence_meaning_id","meaningsentence_text","meaningsentence_datetimecreated","wordIsValidated","datetimeadded","isValidated","prevProps","wordInput","focus","DeviceEventEmitter","emit","styles","keyboardContainer","headerButtonLeft","headerTitle","title","headerButtonRight","formContainer","ref","margin","white","borderTopStartRadius","borderTopEndRadius","padding","paddingTop","height","maxWidth","marginLeft","paddingVertical","toString","Component","KeyboardBar","borderTopWidth","borderColor","paddingHorizontal","renderContent","StyleSheet","create"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;AAEA,OAAOC,OAAP,MAAoB,iCAApB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,aAA/B,EAA8CC,YAA9C;AAEA,OAAOC,MAAP;AACA,OAAOC,UAAP;AACA,OAAOC,SAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,OAAP;AAEA,OAAOC,gBAAP;AAEA,OAAOC,QAAP;;IAEMC,a;;;;;AAEF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAkEnBC,kCAlEmB,GAkEkB,UAACC,IAAD,EAAQC,KAAR,EAAkB;AACnDC,MAAAA,OAAO,GAAG,MAAKC,KAAL,CAAWD,OAArB;AACAA,MAAAA,OAAO,CAACD,KAAD,CAAP,CAAeG,eAAf;AACH,KArEkB;;AAAA,UAwEnBC,aAxEmB,GAwEH,YAAM;AAClBH,MAAAA,OAAO,GAAG,MAAKC,KAAL,CAAWD,OAArB;AACAA,MAAAA,OAAO,CAACI,MAAR,CAAe,MAAKH,KAAL,CAAWI,mBAA1B,EAA+C,CAA/C;;AACA,YAAKC,QAAL,CAAc;AAAEN,QAAAA,OAAO,EAAEA;AAAX,OAAd;AACH,KA5EkB;;AAAA,UA+EnBO,kBA/EmB,GA+EE,UAACT,IAAD,EAAU;AAC3B,YAAKG,KAAL,CAAWO,IAAX,CAAgBC,WAAhB,GAA8BX,IAA9B;;AACA,YAAKQ,QAAL,CAAc;AAAEE,QAAAA,IAAI,EAAE,MAAKP,KAAL,CAAWO;AAAnB,OAAd;AACH,KAlFkB;;AAAA,UAqFnBE,4BArFmB,GAqFY,YAAM;AAGjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,YAAKN,QAAL,CAAc,UAAAO,SAAS;AAAA,eAAK;AAACC,UAAAA,qBAAqB,EAAE,CAACD,SAAS,CAACC;AAAnC,SAAL;AAAA,OAAvB;AACH,KA1FkB;;AAAA,UA4FnBC,wBA5FmB,GA4FQ,YAAM;AAC7B,YAAKT,QAAL,CAAc,UAAAO,SAAS;AAAA,eAAK;AAACG,UAAAA,iBAAiB,EAAE,CAACH,SAAS,CAACG;AAA/B,SAAL;AAAA,OAAvB;AACH,KA9FkB;;AAAA,UAgGnBC,0BAhGmB,GAgGU,UAAClB,KAAD,EAAW;AACpC,YAAKO,QAAL,CAAc;AAACD,QAAAA,mBAAmB,EAAEN;AAAtB,OAAd;AACH,KAlGkB;;AAAA,UAoGnBmB,gBApGmB,GAoGA,YAAM;AAErBtC,MAAAA,OAAO,CAACuC,KAAR,GAAgBC,IAAhB,CAAqB,UAAAC,cAAc,EAAI;AACnC,YAAIA,cAAc,CAACC,IAAf,IAAuB,MAA3B,EAAmC;AAE/Bd,UAAAA,IAAI,GAAG,MAAKP,KAAL,CAAWO,IAAX,CAAgBe,SAAhB,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqCC,IAArC,CAA0C,GAA1C,CAAP;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAW,UAAAA,KAAK,CAAC,6DAA2DX,IAA5D,CAAL,CAAuEY,IAAvE,CAA4E,UAACM,QAAD;AAAA,mBAExEA,QAAQ,CAACC,IAAT,EAFwE;AAAA,WAA5E,EAICP,IAJD,CAIM,UAACQ,YAAD,EAAkB;AAEpB,kBAAKC,YAAL,CAAkBD,YAAlB;AACH,WAPD,EAOGE,KAPH,CAOS,UAACC,KAAD,EAAW;AAEhBpB,YAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACH,WAVD;AAWH;AACJ,OAjBD;AAkBH,KAxHkB;;AAAA,UA2HnBF,YA3HmB,GA2HJ,UAACD,YAAD,EAAkB;AAC7B,YAAKb,wBAAL;;AAKAiB,MAAAA,IAAI,GAAG,EAAP;AACAC,MAAAA,OAAO,GAAG,EAAV;AAEAtB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,YAAZ;AAGAA,MAAAA,YAAY,CAACM,OAAb,CAAqB,UAAC1B,IAAD,EAAU;AAE3BwB,QAAAA,IAAI,CAACT,SAAL,GAAiBf,IAAI,CAAC,MAAD,CAArB;AACAwB,QAAAA,IAAI,CAACG,kBAAL,GAA0B3B,IAAI,CAAC,UAAD,CAA9B;AACAwB,QAAAA,IAAI,CAACvB,WAAL,GAAmBD,IAAI,CAAC,QAAD,CAAvB;;AAGA,aAAK,IAAI4B,cAAT,IAA2B5B,IAAI,CAAC,SAAD,CAA/B,EAA4C;AACxCA,UAAAA,IAAI,CAAC,SAAD,CAAJ,CAAgB4B,cAAhB,EAAgCF,OAAhC,CAAwC,UAAClC,OAAD,EAAa;AACjDiC,YAAAA,OAAO,CAACI,IAAR,CAAa;AAACC,cAAAA,YAAY,EAAEtC,OAAO,CAAC,YAAD,CAAtB;AAAsCuC,cAAAA,sBAAsB,EAAEH;AAA9D,aAAb;AACH,WAFD;AAGH;AACJ,OAZD;;AAcA,YAAK9B,QAAL,CAAc;AACVkC,QAAAA,OAAO,EAAER,IADC;AAEVS,QAAAA,UAAU,EAAER;AAFF,OAAd;;AAIAtB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKX,KAAL,CAAWuC,OAAvB;AACH,KA1JkB;;AAAA,UA6JnBE,kBA7JmB,GA6JE,YAAM;AAGvB/B,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKX,KAAL,CAAW0C,eAAvB;AACA,UAAI,MAAK1C,KAAL,CAAW0C,eAAX,IAA8B,MAAlC,EAA0C,MAAKrC,QAAL,CAAc,UAACO,SAAD;AAAA,eAAgB;AAACL,UAAAA,IAAI,oBAAOK,SAAS,CAACL,IAAjB;AAAuBe,YAAAA,SAAS,EAAEqB;AAAlC;AAAL,SAAhB;AAAA,OAAd,EAA1C,KACK,IAAI,MAAK3C,KAAL,CAAW0C,eAAX,IAA8B,eAAlC,EAAmD,MAAKrC,QAAL,CAAc,UAACO,SAAD;AAAA,eAAgB;AAACL,UAAAA,IAAI,oBAAOK,SAAS,CAACL,IAAjB;AAAuB2B,YAAAA,kBAAkB,EAAES;AAA3C;AAAL,SAAhB;AAAA,OAAd,EAAnD,KACA,IAAI,MAAK3C,KAAL,CAAW0C,eAAX,IAA8B,SAAlC,EAA6C;AAC9C,YAAI,MAAK1C,KAAL,CAAWI,mBAAX,IAAkC,MAAKJ,KAAL,CAAWD,OAAX,CAAmB6C,MAAnB,GAA0B,CAAhE,EAAmE;AAC/D7C,UAAAA,OAAO,GAAG,MAAKC,KAAL,CAAWD,OAArB;AACAA,UAAAA,OAAO,CAAC,MAAKC,KAAL,CAAWI,mBAAZ,CAAP,CAAwCiC,YAAxC,GAAuDM,SAAvD;;AACA,gBAAKtC,QAAL,CAAc;AAAEN,YAAAA,OAAO,EAAEA;AAAX,WAAd;AACH,SAJD,MAIO;AACH,gBAAKG,aAAL;AACH;AACJ,OARI,MASA,IAAI,MAAKF,KAAL,CAAW0C,eAAX,IAA8B,gBAAlC,EAAoD;AACrD3C,QAAAA,OAAO,GAAG,MAAKC,KAAL,CAAWD,OAArB;AACAA,QAAAA,OAAO,CAAC,MAAKC,KAAL,CAAWI,mBAAZ,CAAP,CAAwCkC,sBAAxC,GAAiEK,SAAjE;;AACA,cAAKtC,QAAL,CAAc;AAAEN,UAAAA,OAAO,EAAEA;AAAX,SAAd;AACH;AACJ,KAjLkB;;AAAA,UAoLnB8C,gBApLmB,GAoLA,YAAM;AAErB,eAAeC,YAAf,CAA4BC,KAA5B,EAAmCC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACalD,gBAAAA,KADb,GACqB,CADrB;;AAAA;AAAA,sBACwBA,KAAK,GAAGiD,KAAK,CAACH,MADtC;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAEcI,QAAQ,CAACD,KAAK,CAACjD,KAAD,CAAN,EAAeA,KAAf,EAAsBiD,KAAtB,CAFtB;;AAAA;AAC8CjD,gBAAAA,KAAK,EADnD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQAiC,MAAAA,IAAI,GAAG,MAAK/B,KAAL,CAAWO,IAAlB;AACA0C,MAAAA,QAAQ,GAAG,MAAKjD,KAAL,CAAWD,OAAtB;AACAmD,MAAAA,GAAG,GAAG,MAAKlD,KAAL,CAAWmD,IAAjB;AAEA1D,MAAAA,QAAQ,CAAC2D,OAAT,CAAiBrB,IAAjB,EAAuBZ,IAAvB,CAA4B,kBAAMkC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAClBP,YAAY,CAACG,QAAD,EAAW,iBAAOlD,OAAP;AAAA;AAAA;AAAA;AAAA;AACzBA,0BAAAA,OAAO,CAACuD,eAAR,GAA0BD,OAA1B;AADyB;AAAA,2DAEnB5D,QAAQ,CAAC8D,UAAT,CAAoBxD,OAApB,EACL8B,KADK,CACC,UAACC,KAAD;AAAA,mCAAWpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAAX;AAAA,2BADD,CAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAX,CADM;;AAAA;AAAA;AAAA,iDAMlBgB,YAAY,CAACI,GAAD,EAAM,kBAAOM,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DACd/D,QAAQ,CAACgE,MAAT,CAAgBD,GAAG,CAACE,SAApB,EAA+BvC,IAA/B,CAAoC,kBAAMwC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA,0CAElCA,IAAI,CAACf,MAAL,GAAc,CAFoB;AAAA;AAAA;AAAA;;AAAA;AAAA,qEAG5BnD,QAAQ,CAACmE,UAAT,CAAoBP,OAApB,EAA6BM,IAAI,CAAC,CAAD,CAAJ,CAAQE,MAArC,EACLhC,KADK,CACC,UAAAC,KAAK;AAAA,6CAAIpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAAJ;AAAA,qCADN,CAH4B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qEAQ5BrC,QAAQ,CAACqE,MAAT,CAAgBN,GAAhB,EAAqBrC,IAArB,CAA0B,kBAAM0C,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EACtBpE,QAAQ,CAACmE,UAAT,CAAoBP,OAApB,EAA6BQ,MAA7B,EACLhC,KADK,CACC,UAACC,KAAD;AAAA,uDAAWpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAAX;AAAA,+CADD,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA1B,EAILD,KAJK,CAIC,UAACC,KAAD;AAAA,6CAAWpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAAX;AAAA,qCAJD,CAR4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAApC,EAcHD,KAdG,CAcG,UAAAC,KAAK;AAAA,mCAAIpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAAJ;AAAA,2BAdR,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAN,CANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA5B,EAwBCD,KAxBD,CAwBO,UAACC,KAAD;AAAA,eAAWpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAAX;AAAA,OAxBP,EAyBCX,IAzBD,CAyBM;AAAA,eAAM,MAAKxB,KAAL,CAAWoE,UAAX,CAAsBC,MAAtB,EAAN;AAAA,OAzBN;AA2BH,KA7NkB;;AAAA,UA+NnBC,IA/NmB,GA+NZ,YAAM;AACTvD,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKX,KAAjB;;AACA,YAAKK,QAAL,CAAc;AAACQ,QAAAA,qBAAqB,EAAE;AAAxB,OAAd;AAEH,KAnOkB;;AAAA,UAqOnBqD,0BArOmB,GAqOU,YAAM;AAC/BnC,MAAAA,IAAI,GAAG,MAAK/B,KAAL,CAAWuC,OAAlB;AACAR,MAAAA,IAAI,CAACT,SAAL,GAAiB,MAAKtB,KAAL,CAAWO,IAAX,CAAgBe,SAAjC;AACAU,MAAAA,OAAO,GAAG,MAAKhC,KAAL,CAAWwC,UAArB;;AACA,YAAKnC,QAAL,CAAc;AACVE,QAAAA,IAAI,EAAEwB,IADI;AAEVhC,QAAAA,OAAO,EAAEiC,OAFC;AAGVjB,QAAAA,iBAAiB,EAAE;AAHT,OAAd,EAIG,YAAM;AACL,cAAKoD,WAAL,CAAiBC,UAAjB;AACH,OAND;AAOH,KAhPkB;;AAAA,UAmPnBC,iBAnPmB,GAmPC,YAAM;AACtB,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,aAAa,EAAE,KAAzB;AAAgCC,UAAAA,UAAU,EAAE;AAA5C,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACF,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,aAAa,EAAE;AAAzB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,MAAKtD,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAoB,QAAA,IAAI,EAAC,WAAzB;AAAqC,QAAA,KAAK,EAAEnC,MAAM,CAAC2F,OAAP,CAAeC,IAA3D;AAAiE,QAAA,OAAO,EAAE,MAAK1E,KAAL,CAAW2E,cAAX,GAA4B,CAA5B,GAAgC,CAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,CADJ,EAUI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACL,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,aAAa,EAAE,KAAzB;AAAgCK,UAAAA,cAAc,EAAE;AAAhD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE;AAACC,UAAAA,WAAW,EAAE;AAAd,SAAzB;AACI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAKpC,kBAAL,EAAN;AAAA,SADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACqC,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAEjG,MAAM,CAAC2F,OAAP,CAAeC;AAArC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,CAJJ,CAVJ,EAoBI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACJ,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,aAAa,EAAE,KAAzB;AAAgCK,UAAAA,cAAc,EAAE;AAAhD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,mBAAM;AAAC,gBAAKT,WAAL,CAAiBa,aAAjB,CAA+B,MAAKhF,KAAL,CAAWI,mBAAX,GAAiC,CAAhE;AAAmE,SAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,cAAX;AAA0B,QAAA,KAAK,EAAEtB,MAAM,CAAC2F,OAAP,CAAeC,IAAhD;AAAsD,QAAA,IAAI,EAAE,EAA5D;AAAgE,QAAA,OAAO,EAAE,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACI,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAEjG,MAAM,CAAC2F,OAAP,CAAeC;AAArC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0D,MAAK1E,KAAL,CAAWI,mBAAX,GAAiC,CAA3F,OAA+F,MAAKJ,KAAL,CAAWD,OAAX,CAAmB6C,MAAlH,CAJJ,EAKI,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,mBAAM;AAAC,gBAAKuB,WAAL,CAAiBa,aAAjB,CAA+B,MAAKhF,KAAL,CAAWI,mBAAX,GAAiC,CAAhE;AAAmE,SAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,eAAX;AAA2B,QAAA,KAAK,EAAEtB,MAAM,CAAC2F,OAAP,CAAeC,IAAjD;AAAuD,QAAA,IAAI,EAAE,EAA7D;AAAiE,QAAA,OAAO,EAAE,CAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,CApBJ,EA6BI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACJ,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,aAAa,EAAE,KAAzB;AAAgCK,UAAAA,cAAc,EAAE;AAAhD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAKX,IAAL,EAAN;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,KAAX;AAAiB,QAAA,KAAK,EAAEnF,MAAM,CAAC2F,OAAP,CAAeC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CA7BJ,CADJ;AAoCH,KAxRkB;;AAAA,UAyXnBO,aAzXmB,GAyXH,gBAAmB;AAAA,UAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,UAAXpF,KAAW,QAAXA,KAAW;AAC/BqF,MAAAA,OAAO,GAAG,CAAC;AAACtF,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAV;AACA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAC0E,UAAAA,aAAa,EAAE,KAAhB;AAAuBa,UAAAA,YAAY,EAAE;AAArC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACP,UAAAA,WAAW,EAAE;AAAd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKK,IAAI,CAAC5C,sBAAL,IAA+BK,SAA/B,GAA2C,IAA3C,GACG,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACmC,UAAAA,QAAQ,EAAE,EAAX;AAAeM,UAAAA,YAAY,EAAE,CAA7B;AAAgCL,UAAAA,KAAK,EAAE;AAAvC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8DG,IAAI,CAAC5C,sBAAnE,CAFR,EAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACwC,UAAAA,QAAQ,EAAE,EAAX;AAAeM,UAAAA,YAAY,EAAE;AAA7B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiDF,IAAI,CAAC7C,YAAtD,CAJJ,CADJ,EAOI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACgD,UAAAA,eAAe,EAAE;AAAlB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,CADJ;AAaH,KAxYkB;;AAGf,UAAKrF,KAAL,GAAa;AACTO,MAAAA,IAAI,EAAE;AACF8C,QAAAA,OAAO,EAAEV,SADP;AAEFrB,QAAAA,SAAS,EAAEqB,SAFT;AAGFT,QAAAA,kBAAkB,EAAES,SAHlB;AAIFnC,QAAAA,WAAW,EAAEmC,SAJX;AAKF2C,QAAAA,kBAAkB,EAAE3C;AALlB,OADG;AAQT5C,MAAAA,OAAO,EAAE,CACL;AACIwF,QAAAA,UAAU,EAAE5C,SADhB;AAEIN,QAAAA,YAAY,EAAEM,SAFlB;AAGIL,QAAAA,sBAAsB,EAAEK,SAH5B;AAII6C,QAAAA,uBAAuB,EAAE7C;AAJ7B,OADK,CARA;AAgBT8C,MAAAA,eAAe,EAAE,CACb;AACIC,QAAAA,kBAAkB,EAAE/C,SADxB;AAEIgD,QAAAA,0BAA0B,EAAEhD,SAFhC;AAGIiD,QAAAA,oBAAoB,EAAEjD,SAH1B;AAIIkD,QAAAA,+BAA+B,EAAElD;AAJrC,OADa,CAhBR;AAwBTQ,MAAAA,IAAI,EAAE,EAxBG;AA6BTZ,MAAAA,OAAO,EAAE;AACLjB,QAAAA,SAAS,EAAE;AADN,OA7BA;AAgCTlB,MAAAA,mBAAmB,EAAE,CAhCZ;AAiCTsC,MAAAA,eAAe,EAAEC,SAjCR;AAkCTmD,MAAAA,eAAe,EAAE,KAlCR;AAmCTnB,MAAAA,cAAc,EAAE,KAnCP;AAoCToB,MAAAA,aAAa,EAAEpD,SApCN;AAqCTqD,MAAAA,WAAW,EAAE;AArCJ,KAAb;AAHe;AA0ClB;;;;uCAIkBC,S,EAAWrF,S,EAAW;AAErC,UAAI,KAAKZ,KAAL,CAAWO,IAAX,CAAgBe,SAAhB,IAA6BqB,SAA7B,IAA0C,KAAK3C,KAAL,CAAWO,IAAX,CAAgBe,SAAhB,IAA6B,EAAvE,IAA6E,KAAKtB,KAAL,CAAWO,IAAX,CAAgBe,SAAhB,CAA0BsB,MAA1B,IAAoC,EAArH,EAAyH;AACrH,YAAIhC,SAAS,CAACoF,WAAV,IAAyB,IAA7B,EAAmC,KAAK3F,QAAL,CAAc;AAAE2F,UAAAA,WAAW,EAAE;AAAf,SAAd;AACtC,OAFD,MAEO;AACH,YAAIpF,SAAS,CAACoF,WAAV,IAAyB,KAA7B,EAAoC,KAAK3F,QAAL,CAAc;AAAE2F,UAAAA,WAAW,EAAE;AAAf,SAAd;AACvC;AACJ;;;wCAGmB;AAChB,WAAKE,SAAL,CAAeC,KAAf;AACH;;;2CAGsB;AACnBC,MAAAA,kBAAkB,CAACC,IAAnB,CAAwB,kBAAxB;AACH;;;6BA2NQ;AAAA;;AACL,aACI,oBAAC,oBAAD;AAAsB,QAAA,KAAK,EAAEC,MAAM,CAACC,iBAApC;AAAuD,QAAA,QAAQ,EAAC,SAAhE;AAA0E,QAAA,OAAO,MAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,UAAU,EACN,oBAAC,gBAAD;AACI,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAAC5G,KAAL,CAAWoE,UAAX,CAAsBC,MAAtB,EAAN;AAAA,WADb;AAEI,UAAA,KAAK,EAAEjF,YAAY,CAACyH,gBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGI,oBAAC,IAAD;AAAM,UAAA,aAAa,EAAE,CAArB;AAAwB,UAAA,KAAK,EAAE;AAACzB,YAAAA,KAAK,EAAEjG,MAAM,CAAC2F,OAAP,CAAeC,IAAvB;AAA6BI,YAAAA,QAAQ,EAAE;AAAvC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,CAFR;AAQI,QAAA,WAAW,EACP,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE/F,YAAY,CAAC0H,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwC,KAAK9G,KAAL,CAAW+G,KAAnD,CATR;AAWI,QAAA,WAAW,EACP,oBAAC,UAAD;AACI,UAAA,IAAI,EAAC,KADT;AAEI,UAAA,KAAK,EAAE3H,YAAY,CAAC4H,iBAFxB;AAGI,UAAA,OAAO,EAAE,KAAK3G,KAAL,CAAWgG,WAHxB;AAII,UAAA,OAAO,EAAE,KAAKnD,gBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAqBI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEyD,MAAM,CAACM,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,GAAG,EAAE,aAACC,KAAD,EAAS;AAAE,UAAA,MAAI,CAACX,SAAL,GAAiBW,KAAjB;AAAsB,SAD1C;AAEI,QAAA,KAAK,EAAE,KAAK7G,KAAL,CAAWO,IAAX,CAAgBe,SAF3B;AAGI,QAAA,YAAY,EAAE,sBAACzB,IAAD;AAAA,iBAAU,MAAI,CAACQ,QAAL,CAAc,UAACO,SAAD;AAAA,mBAAgB;AAACL,cAAAA,IAAI,oBAAOK,SAAS,CAACL,IAAjB;AAAuBe,gBAAAA,SAAS,EAAEzB;AAAlC;AAAL,aAAhB;AAAA,WAAd,CAAV;AAAA,SAHlB;AAII,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACQ,QAAL,CAAc;AAACqC,YAAAA,eAAe,EAAE;AAAlB,WAAd,CAAN;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOI,oBAAC,kBAAD;AACI,QAAA,KAAK,EAAE,KAAK1C,KAAL,CAAWO,IAAX,CAAgB2B,kBAD3B;AAEI,QAAA,YAAY,EAAE,sBAACrC,IAAD;AAAA,iBAAU,MAAI,CAACQ,QAAL,CAAc,UAACO,SAAD;AAAA,mBAAgB;AAACL,cAAAA,IAAI,oBAAOK,SAAS,CAACL,IAAjB;AAAuB2B,gBAAAA,kBAAkB,EAAErC;AAA3C;AAAL,aAAhB;AAAA,WAAd,CAAV;AAAA,SAFlB;AAGI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACQ,QAAL,CAAc;AAACqC,YAAAA,eAAe,EAAE;AAAlB,WAAd,CAAN;AAAA,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAYI,oBAAC,WAAD;AACI,QAAA,SAAS,MADb;AAEI,QAAA,GAAG,EAAE,aAACmE,KAAD,EAAS;AAAE,UAAA,MAAI,CAAC1C,WAAL,GAAmB0C,KAAnB;AAAwB,SAF5C;AAGI,QAAA,IAAI,EAAE,KAAK7G,KAAL,CAAWD,OAHrB;AAII,QAAA,mBAAmB,EAAE,6BAACA,OAAD;AAAA,iBAAa,MAAI,CAACM,QAAL,CAAc;AAACN,YAAAA,OAAO,EAAEA;AAAV,WAAd,CAAb;AAAA,SAJzB;AAKI,QAAA,oBAAoB,EAAE,8BAACD,KAAD;AAAA,iBAAW,MAAI,CAACkB,0BAAL,CAAgClB,KAAhC,CAAX;AAAA,SAL1B;AAMI,QAAA,kBAAkB,EAAE;AAAA,iBAAM,MAAI,CAACO,QAAL,CAAc;AAACqC,YAAAA,eAAe,EAAE;AAAlB,WAAd,CAAN;AAAA,SANxB;AAOI,QAAA,yBAAyB,EAAE;AAAA,iBAAM,MAAI,CAACrC,QAAL,CAAc;AAACqC,YAAAA,eAAe,EAAE;AAAlB,WAAd,CAAN;AAAA,SAP/B;AAQI,QAAA,gBAAgB,EAAE,KAAKjC,4BAR3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZJ,EAsBI,oBAAC,OAAD;AACI,QAAA,IAAI,EAAE,KAAKT,KAAL,CAAWmD,IADrB;AAEI,QAAA,eAAe,EAAE,yBAACA,IAAD;AAAA,iBAAU,MAAI,CAAC9C,QAAL,CAAc;AAAC8C,YAAAA,IAAI,EAAEA;AAAP,WAAd,CAAV;AAAA,SAFrB;AAGI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC9C,QAAL,CAAc;AAACqC,YAAAA,eAAe,EAAE;AAAlB,WAAd,CAAN;AAAA,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBJ,CArBJ,EAiDI,oBAAC,WAAD;AACI,QAAA,aAAa,EAAE,KAAK2B,iBAAL,EADnB;AAEI,QAAA,OAAO,EAAE,KAAKrE,KAAL,CAAWgG,WAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjDJ,EAqDI,oBAAC,gBAAD;AACI,QAAA,OAAO,EAAE,KAAKhG,KAAL,CAAWD,OAAX,CAAmB,KAAKC,KAAL,CAAWI,mBAA9B,CADb;AAEI,QAAA,WAAW,EAAE,KAAKiE,iBAAL,EAFjB;AAGI,QAAA,gBAAgB,EAAE,KAAK5D,4BAH3B;AAII,QAAA,SAAS,EAAE,KAAKT,KAAL,CAAWa,qBAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArDJ,EA2DI,oBAAC,KAAD;AACI,QAAA,eAAe,EAAE,KAAKC,wBAD1B;AAEI,QAAA,SAAS,EAAE,KAAKd,KAAL,CAAWe,iBAF1B;AAGI,QAAA,eAAe,EAAE,2BAAM;AACnB,UAAA,MAAI,CAACV,QAAL,CAAc,UAAAO,SAAS;AAAA,mBAAK;AACxBG,cAAAA,iBAAiB,EAAE;AADK,aAAL;AAAA,WAAvB;AAIH,SARL;AASI,QAAA,KAAK,EAAE;AAAC6D,UAAAA,cAAc,EAAE,UAAjB;AAA6BkC,UAAAA,MAAM,EAAE;AAArC,SATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACzB,UAAAA,eAAe,EAAEvG,MAAM,CAAC2F,OAAP,CAAesC,KAAjC;AAAwCC,UAAAA,oBAAoB,EAAE,EAA9D;AAAkEC,UAAAA,kBAAkB,EAAE,EAAtF;AAA0FC,UAAAA,OAAO,EAAE,EAAnG;AAAuGC,UAAAA,UAAU,EAAE,CAAnH;AAAsHC,UAAAA,MAAM,EAAEpI,aAAa,GAAC;AAA5I,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACuF,UAAAA,aAAa,EAAE,KAAhB;AAAuBK,UAAAA,cAAc,EAAE,eAAvC;AAAwDJ,UAAAA,UAAU,EAAE;AAApE,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACM,UAAAA,QAAQ,EAAE,EAAX;AAAeuC,UAAAA,QAAQ,EAAEpI,YAAY,GAAC;AAAtC,SAAb;AAAyD,QAAA,aAAa,EAAE,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4E,KAAKe,KAAL,CAAWO,IAAX,CAAgBe,SAA5F,CADJ,EAEI,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE;AAACgG,UAAAA,UAAU,EAAE,EAAb;AAAiBzC,UAAAA,WAAW,EAAE,CAA9B;AAAiC0C,UAAAA,eAAe,EAAE;AAAlD,SAAzB;AAA+E,QAAA,OAAO,EAAE,KAAKrD,0BAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,IAAI,EAAC,oBAA3B;AAAgD,QAAA,IAAI,EAAC,IAArD;AAA0D,QAAA,KAAK,EAAEpF,MAAM,CAAC2F,OAAP,CAAeC,IAAhF;AAAsF,QAAA,OAAO,MAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,CADJ,EAOI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,KAAK1E,KAAL,CAAWO,IAAX,CAAgBe,SAAvB,CADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAC8D,UAAAA,YAAY,EAAE;AAAf,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiC,KAAKpF,KAAL,CAAWuC,OAAX,KAAuB,aAAvB,GAAuC,KAAKvC,KAAL,CAAWuC,OAAX,CAAmBL,kBAA1D,GAA+E,EAAhH,CAFJ,EAGI,oBAAC,QAAD;AACI,QAAA,IAAI,EAAE,KAAKlC,KAAL,CAAWwC,UADrB;AAEI,QAAA,UAAU,EAAE,KAAKyC,aAFrB;AAGI,QAAA,YAAY,EAAE,sBAACC,IAAD,EAAOpF,KAAP;AAAA,iBAAiBA,KAAK,CAAC0H,QAAN,EAAjB;AAAA,SAHlB;AAII,QAAA,OAAO,EAAE,iBAACtC,IAAD,EAAOpF,KAAP;AAAA,iBAAiBA,KAAK,CAAC0H,QAAN,EAAjB;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CAPJ,CAXJ,CA3DJ,CADJ;AA4FH;;;;EAzXuB9I,KAAK,CAAC+I,S;;AA6YlCC,WAAW,GAAG,qBAAC/H,KAAD,EAAW;AACjB,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACgI,MAAAA,cAAc,EAAE,CAAjB;AAAoBC,MAAAA,WAAW,EAAE,SAAjC;AAA4CR,MAAAA,MAAM,EAAE,EAApD;AAAwD5C,MAAAA,UAAU,EAAE,QAApE;AAA8EqD,MAAAA,iBAAiB,EAAE;AAAjG,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKlI,KAAK,CAACmI,aADX,CADJ;AAKP,CAND;;AAQA,IAAMxB,MAAM,GAAGyB,UAAU,CAACC,MAAX,CAAkB;AAC7BzB,EAAAA,iBAAiB,EAAE;AACfjC,IAAAA,IAAI,EAAE;AADS,GADU;AAI7BsC,EAAAA,aAAa,EAAE;AACXtC,IAAAA,IAAI,EAAE,CADK;AAEXuD,IAAAA,iBAAiB,EAAE;AAFR;AAJc,CAAlB,CAAf;AAUA,eAAenI,aAAf","sourcesContent":["import React from 'react';\r\nimport { DeviceEventEmitter, ScrollView, FlatList, KeyboardAvoidingView, Text, View, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\nimport { Icon } from 'react-native-elements';\r\nimport Modal from 'react-native-modal';\r\n\r\nimport { colors, headerStyles, SCREEN_HEIGHT, SCREEN_WIDTH } from '../Styles';\r\n\r\nimport Header from '../components/Header';\r\nimport PillButton from '../components/Buttons/PillButton';\r\nimport WordInput from '../components/Forms/WordInput';\r\nimport PronunciationInput from '../components/Forms/PronunciationInput';\r\nimport MeaningForm from '../components/Forms/MeaningForm';\r\nimport TagForm from '../components/Forms/TagForm';\r\n\r\nimport MeaningFormModal from '../components/Forms/MeaningFormModal';\r\n\r\nimport database from '../services/Database';\r\n\r\nclass AddWordScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            word: {\r\n                word_id: undefined,\r\n                word_text: undefined,\r\n                word_pronunciation: undefined,\r\n                word_origin: undefined,\r\n                word_datetimeadded: undefined,\r\n            },\r\n            meaning: [\r\n                {\r\n                    meaning_id: undefined,\r\n                    meaning_text: undefined,\r\n                    meaning_classification: undefined,\r\n                    meaning_datetimecreated: undefined,\r\n                }\r\n            ],\r\n            meaningsentence: [\r\n                {\r\n                    meaningsentence_id: undefined,\r\n                    meaningsentence_meaning_id: undefined,\r\n                    meaningsentence_text: undefined,\r\n                    meaningsentence_datetimecreated: undefined,\r\n                }\r\n            ],\r\n            tags: [\r\n                // {\r\n                    // tag_title: undefined,\r\n                // }\r\n            ],\r\n            apiWord: {\r\n                word_text: \"\",\r\n            },\r\n            meaningCurrentIndex: 0,\r\n            keyboardBarType: undefined,\r\n            wordIsValidated: false,\r\n            wordHasAPIdata: false,\r\n            datetimeadded: undefined,\r\n            isValidated: false,\r\n        }\r\n    }\r\n\r\n    // Function executes everytime the page is updated\r\n    // Perform validation\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Validate Word\r\n        if (this.state.word.word_text != undefined && this.state.word.word_text != \"\" && this.state.word.word_text.length <= 64) {\r\n            if (prevState.isValidated != true) this.setState({ isValidated: true });\r\n        } else {\r\n            if (prevState.isValidated != false) this.setState({ isValidated: false });\r\n        }\r\n    }\r\n\r\n    // Focus on the caret on the word input when page is loaded\r\n    componentDidMount() {\r\n        this.wordInput.focus();\r\n    }\r\n\r\n    // Notify listeners\r\n    componentWillUnmount() {\r\n        DeviceEventEmitter.emit(\"database_changed\");\r\n    }\r\n\r\n    // Handle meaning sentence example change\r\n    handleMeaningSentenceExampleChange = (text , index) => {\r\n        meaning = this.state.meaning;\r\n        meaning[index].sentenceexample\r\n    }\r\n\r\n    // Remove meaning\r\n    removeMeaning = () => {\r\n        meaning = this.state.meaning;\r\n        meaning.splice(this.state.meaningCurrentIndex, 1);\r\n        this.setState({ meaning: meaning });\r\n    }\r\n\r\n    // Handle origin change\r\n    handleOriginChange = (text) => {\r\n        this.state.word.word_origin = text;\r\n        this.setState({ word: this.state.word });\r\n    }\r\n\r\n    // Toggle \r\n    toggleMeaningModalVisibility = () => {\r\n        // Toggle Modal Visibility\r\n        // True to display, vice versa\r\n        console.log('toggling');\r\n        this.setState(prevState => ({isMeaningModalVisible: !prevState.isMeaningModalVisible}))\r\n    }\r\n\r\n    toggleAPIModalVisibility = () => {\r\n        this.setState(prevState => ({isAPIModalVisible: !prevState.isAPIModalVisible}))\r\n    }\r\n\r\n    meaningCurrentIndexChanged = (index) => {\r\n        this.setState({meaningCurrentIndex: index})\r\n    }\r\n\r\n    apiButtonPressed = () => {\r\n        // Fetch data when api button is pressed\r\n        NetInfo.fetch().then(connectionInfo => {\r\n            if (connectionInfo.type != 'none') {\r\n                // Replace spaces with dashes\r\n                word = this.state.word.word_text.split(\" \").join(\"-\");\r\n                console.log(word);\r\n                fetch('https://googledictionaryapi.eu-gb.mybluemix.net/?define='+word).then((response) => \r\n                    // Jsonify Data\r\n                    response.json()\r\n                )\r\n                .then((responseJson) => {\r\n                    // Handle Data\r\n                    this.openAPIModal(responseJson);\r\n                }).catch((error) => {\r\n                    // Handle Fail\r\n                    console.log(error);\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    // Opens up the API modal\r\n    openAPIModal = (responseJson) => {\r\n        this.toggleAPIModalVisibility();\r\n        // Convert responseJson to word object\r\n        // Use word card to display\r\n\r\n        // Create objects\r\n        Word = {};\r\n        Meaning = [];\r\n        \r\n        console.log(responseJson);\r\n\r\n        // Convert responseJson to objects\r\n        responseJson.forEach((word) => {\r\n            // Retrieve word_text\r\n            Word.word_text = word[\"word\"];\r\n            Word.word_pronunciation = word[\"phonetic\"];\r\n            Word.word_origin = word[\"origin\"];\r\n\r\n            // Retrieve meaning\r\n            for (var classification in word[\"meaning\"]) {\r\n                word[\"meaning\"][classification].forEach((meaning) => {\r\n                    Meaning.push({meaning_text: meaning[\"definition\"], meaning_classification: classification})\r\n                })\r\n            }\r\n        });\r\n        // Objects obtained\r\n        this.setState({\r\n            apiWord: Word,\r\n            apiMeaning: Meaning\r\n        });\r\n        console.log(this.state.apiWord);\r\n    }\r\n\r\n    // Handle clear button pressed\r\n    clearButtonPressed = () => {\r\n        // Get the current keyboard state\r\n        // Remove state.item based on current keyboard state\r\n        console.log(this.state.keyboardBarType);\r\n        if (this.state.keyboardBarType == \"word\") this.setState((prevState) => ({word: { ...prevState.word, word_text: undefined}}))\r\n        else if (this.state.keyboardBarType == \"pronunciation\") this.setState((prevState) => ({word: { ...prevState.word, word_pronunciation: undefined}}))\r\n        else if (this.state.keyboardBarType == \"meaning\") {\r\n            if (this.state.meaningCurrentIndex == this.state.meaning.length-1) {\r\n                meaning = this.state.meaning;\r\n                meaning[this.state.meaningCurrentIndex].meaning_text = undefined;\r\n                this.setState({ meaning: meaning });\r\n            } else {\r\n                this.removeMeaning();\r\n            }\r\n        } \r\n        else if (this.state.keyboardBarType == \"classification\") {\r\n            meaning = this.state.meaning;\r\n            meaning[this.state.meaningCurrentIndex].meaning_classification = undefined;\r\n            this.setState({ meaning: meaning });\r\n        }\r\n    }\r\n\r\n    // Handle add button pressed\r\n    addButtonPressed = () => {\r\n\r\n        async function asyncForEach(array, callback) {\r\n            for (let index = 0; index < array.length; index++) {\r\n                await callback(array[index], index, array);\r\n            }\r\n        }\r\n\r\n        // Maybe use entities\r\n\r\n        Word = this.state.word;\r\n        Meanings = this.state.meaning\r\n        Tag = this.state.tags;\r\n\r\n        database.addWord(Word).then(async word_id => {\r\n            await asyncForEach(Meanings, async (meaning) => {\r\n                meaning.meaning_word_id = word_id;\r\n                await database.addMeaning(meaning)\r\n                .catch((error) => console.log(error));\r\n            })\r\n            await asyncForEach(Tag, async (tag) => {\r\n                await database.getTag(tag.tag_title).then(async data => {\r\n                    // Tag already exist, just link the tag\r\n                    if (data.length > 0) {\r\n                        await database.addWordTag(word_id, data[0].tag_id)\r\n                        .catch(error => console.log(error))\r\n                    }\r\n                    // Tag doesn't exist, create tag first then link the tag\r\n                    else {\r\n                        await database.addTag(tag).then(async tag_id => {\r\n                            await database.addWordTag(word_id, tag_id)\r\n                            .catch((error) => console.log(error));\r\n                        })\r\n                        .catch((error) => console.log(error))\r\n                    }\r\n                }).catch(error => console.log(error))\r\n            })\r\n        })\r\n        .catch((error) => console.log(error))\r\n        .then(() => this.props.navigation.goBack())\r\n\r\n    }\r\n\r\n    test = () => {\r\n        console.log(this.state);\r\n        this.setState({isMeaningModalVisible: true})\r\n        // this.insertAPIDataButtonPressed();\r\n    }\r\n\r\n    insertAPIDataButtonPressed = () => {\r\n        Word = this.state.apiWord;\r\n        Word.word_text = this.state.word.word_text;\r\n        Meaning = this.state.apiMeaning;\r\n        this.setState({\r\n            word: Word,\r\n            meaning: Meaning,\r\n            isAPIModalVisible: false\r\n        }, () => {\r\n            this.meaningForm.updateData();\r\n        });\r\n    }\r\n\r\n    // TODO: Clean this chunk of code\r\n    renderKeyboardBar = () => {\r\n        return(\r\n            <View style={{flex: 1, flexDirection: 'row', alignItems: 'center'}}>\r\n                <View style={{flex: 1, flexDirection: 'row'}}>\r\n                    {\r\n                        // API Button\r\n                        // Retrieve api data when button is pressed\r\n                    }\r\n                    <TouchableOpacity onPress={this.apiButtonPressed}>\r\n                        <Icon name='google' type='antdesign' color={colors.default.blue} opacity={this.state.wordHasAPIdata ? 1 : 1}/>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <View style={{flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                    {\r\n                        // Clear button how am I going to deal with it\r\n                    }\r\n                    <TouchableOpacity style={{marginRight: 15}}\r\n                        onPress={() => this.clearButtonPressed()}\r\n                    >\r\n                        <Text style={{fontSize: 16, color: colors.default.blue}}>Clear</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <View style={{flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                    <TouchableOpacity onPress={() => {this.meaningForm.scrollToIndex(this.state.meaningCurrentIndex - 1)}}>\r\n                        <Icon name='chevron-left' color={colors.default.blue} size={22} opacity={1}/>\r\n                    </TouchableOpacity>\r\n                    <Text style={{fontSize: 16, color: colors.default.blue}}>{this.state.meaningCurrentIndex + 1}/{this.state.meaning.length}</Text>\r\n                    <TouchableOpacity onPress={() => {this.meaningForm.scrollToIndex(this.state.meaningCurrentIndex + 1)}}>\r\n                        <Icon name='chevron-right' color={colors.default.blue} size={22} opacity={1}/>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <View style={{flex: 1, flexDirection: 'row', justifyContent: 'flex-end'}}>\r\n                    <TouchableOpacity onPress={() => this.test()}>\r\n                        <Icon name='add' color={colors.default.blue}/>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <KeyboardAvoidingView style={styles.keyboardContainer} behavior=\"padding\" enabled>\r\n                <Header\r\n                    headerLeft={\r\n                        <TouchableOpacity\r\n                            onPress={() => this.props.navigation.goBack()}\r\n                            style={headerStyles.headerButtonLeft}>\r\n                            <Text numberOfLines={1} style={{color: colors.default.blue, fontSize: 16}}>Cancel</Text>\r\n                        </TouchableOpacity>\r\n                    }\r\n                    headerTitle={\r\n                        <Text style={headerStyles.headerTitle}>{this.props.title}</Text>\r\n                    }\r\n                    headerRight={\r\n                        <PillButton\r\n                            text=\"Add\"\r\n                            style={headerStyles.headerButtonRight}\r\n                            enabled={this.state.isValidated}\r\n                            onPress={this.addButtonPressed}\r\n                        />\r\n                    }\r\n                />\r\n                <View style={styles.formContainer}>\r\n                    <WordInput\r\n                        ref={(ref) => { this.wordInput = ref }}\r\n                        value={this.state.word.word_text}\r\n                        onChangeText={(text) => this.setState((prevState) => ({word: { ...prevState.word, word_text: text}}))}\r\n                        onFocus={() => this.setState({keyboardBarType: 'word'})}\r\n                    />\r\n                    <PronunciationInput\r\n                        value={this.state.word.word_pronunciation}\r\n                        onChangeText={(text) => this.setState((prevState) => ({word: { ...prevState.word, word_pronunciation: text}}))}\r\n                        onFocus={() => this.setState({keyboardBarType: 'pronunciation'})}\r\n                    />\r\n                    <MeaningForm\r\n                        autofocus\r\n                        ref={(ref) => { this.meaningForm = ref }}\r\n                        data={this.state.meaning}\r\n                        onMeaningDataChange={(meaning) => this.setState({meaning: meaning})}\r\n                        onMeaningIndexChange={(index) => this.meaningCurrentIndexChanged(index)}\r\n                        onMeaningTextFocus={() => this.setState({keyboardBarType: 'meaning'})}\r\n                        onClassificationTextFocus={() => this.setState({keyboardBarType: 'classification'})}\r\n                        toggleVisibility={this.toggleMeaningModalVisibility}\r\n                    />\r\n                    <TagForm\r\n                        data={this.state.tags}\r\n                        onTagDataChange={(tags) => this.setState({tags: tags})}\r\n                        onFocus={() => this.setState({keyboardBarType: 'tag'})}\r\n                    />\r\n                </View>\r\n                <KeyboardBar\r\n                    renderContent={this.renderKeyboardBar()}\r\n                    enabled={this.state.isValidated}\r\n                />\r\n                <MeaningFormModal\r\n                    meaning={this.state.meaning[this.state.meaningCurrentIndex]}\r\n                    keyboardBar={this.renderKeyboardBar()}\r\n                    toggleVisibility={this.toggleMeaningModalVisibility}\r\n                    isVisible={this.state.isMeaningModalVisible}\r\n                />\r\n                <Modal\r\n                    onSwipeComplete={this.toggleAPIModalVisibility}\r\n                    isVisible={this.state.isAPIModalVisible}\r\n                    onBackdropPress={() => {\r\n                        this.setState(prevState => ({\r\n                            isAPIModalVisible: false,\r\n                        }\r\n                        ))\r\n                    }}\r\n                    style={{justifyContent: 'flex-end', margin: 0}}\r\n                >\r\n                    <View style={{backgroundColor: colors.default.white, borderTopStartRadius: 20, borderTopEndRadius: 20, padding: 20, paddingTop: 0, height: SCREEN_HEIGHT*0.80}}>\r\n                        <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                            <Text style={{fontSize: 30, maxWidth: SCREEN_WIDTH-105}} numberOfLines={1}>{this.state.word.word_text}</Text>\r\n                            <TouchableOpacity style={{marginLeft: 10, marginRight: 5, paddingVertical: 5}} onPress={this.insertAPIDataButtonPressed}>\r\n                                <Icon name=\"arrow-up\" type=\"material-community\" size=\"20\" color={colors.default.blue} reverse></Icon>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                        <ScrollView>\r\n                            <Text>{this.state.word.word_text}</Text>\r\n                            <Text style={{marginBottom: 5}}>{this.state.apiWord !== 'undefeinfed' ? this.state.apiWord.word_pronunciation : \"\"}</Text>\r\n                            <FlatList\r\n                                data={this.state.apiMeaning}\r\n                                renderItem={this.renderMeaning}\r\n                                keyExtractor={(item, index) => index.toString()}\r\n                                listKey={(item, index) => index.toString()}\r\n                            />\r\n                        </ScrollView>\r\n                    </View>\r\n                </Modal>\r\n            </KeyboardAvoidingView>\r\n        )\r\n    }\r\n\r\n    renderMeaning = ({item, index}) => {\r\n        synonym = [{text: \"Synonyms:\"}]\r\n        return(\r\n            <View style={{flexDirection: 'row', marginBottom: 5}}>\r\n                <View style={{marginRight: 60}}>\r\n                    {item.meaning_classification == undefined ? null : (\r\n                        <Text style={{fontSize: 12, marginBottom: 5, color: 'gray'}}>{item.meaning_classification}</Text>\r\n                    )}\r\n                    <Text style={{fontSize: 14, marginBottom: 7.5}}>{item.meaning_text}</Text>\r\n                </View>\r\n                <View style={{backgroundColor: 'pink'}}>\r\n\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nKeyboardBar = (props) => {\r\n        return(\r\n            <View style={{borderTopWidth: 1, borderColor: '#f4f7f8', height: 50, alignItems: 'center', paddingHorizontal: 20}}>\r\n                {props.renderContent}\r\n            </View>\r\n        )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    keyboardContainer: {\r\n        flex: 1,\r\n    },\r\n    formContainer: {\r\n        flex: 1,\r\n        paddingHorizontal: 20,\r\n    }\r\n})\r\n\r\nexport default AddWordScreen;"]},"metadata":{},"sourceType":"module"}