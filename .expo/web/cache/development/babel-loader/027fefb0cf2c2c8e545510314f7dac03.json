{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\src\\\\prototypes\\\\TextList.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Tag from \"../components/Tag\";\nimport { SCREEN_WIDTH } from \"../Styles\";\n\nvar TextList = function (_React$Component) {\n  _inherits(TextList, _React$Component);\n\n  var _super = _createSuper(TextList);\n\n  function TextList(props) {\n    var _this;\n\n    _classCallCheck(this, TextList);\n\n    _this = _super.call(this, props);\n\n    _this.handleTextChange = function (text, index) {\n      if (text[text.length - 1] == \" \") {\n        _this.state.text[index] = \"\";\n\n        _this.state.data.splice(index + 1, 0, text);\n\n        _this.setState({\n          data: _this.state.data\n        });\n      } else {\n        _this.state.text[index] = text;\n      }\n\n      _this.setState({\n        text: _this.state.text\n      });\n    };\n\n    _this.onArrayItemsChange = function (callback) {};\n\n    _this.state = {\n      text: [\"\", \"\", \"\", \"\"],\n      data: [\"item1\", \"item2\", \"item3\", \"item4\"]\n    };\n    return _this;\n  }\n\n  _createClass(TextList, [{\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, animated) {\n      this.flatList.scrollToIndex({\n        animated: animated,\n        index: index\n      });\n    }\n  }, {\n    key: \"_renderItemList\",\n    value: function _renderItemList() {\n      var _this2 = this;\n\n      return React.createElement(FlatList, {\n        style: {\n          height: 40,\n          flex: 1,\n          backgroundColor: 'pink'\n        },\n        ref: function ref(_ref) {\n          return _this2.flatList = _ref;\n        },\n        data: this.state.data,\n        ListHeaderComponent: this._renderListHeader.bind(this),\n        renderItem: this._renderListItem.bind(this),\n        contentContainerStyle: styles.listContainerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"_renderListHeader\",\n    value: function _renderListHeader() {\n      if (this.props.hasHeader) {\n        return React.createElement(Text, {\n          style: [styles.headerStyle, this.props.headerStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 20\n          }\n        }, this.props.headerText == undefined ? \"Header\" : this.props.headerText, \": \");\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_renderListItem\",\n    value: function _renderListItem(_ref2) {\n      var _this3 = this;\n\n      var item = _ref2.item,\n          index = _ref2.index;\n      return React.createElement(View, {\n        style: styles.listItemStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, React.createElement(Tag, {\n        value: item,\n        style: [styles.tagStyle, this.props.tagStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }), React.createElement(TextInput, {\n        value: this.state.text[index],\n        multiline: true,\n        onChangeText: function onChangeText(text) {\n          return _this3.handleTextChange(text, index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, this._renderItemList());\n    }\n  }]);\n\n  return TextList;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    minHeight: 1600\n  },\n  headerStyle: {},\n  tagStyle: {},\n  listContainerStyle: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    width: SCREEN_WIDTH,\n    paddingHorizontal: 20\n  },\n  listItemStyle: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  },\n  textInput: {\n    height: 40,\n    paddingHorizontal: 20,\n    fontSize: 16\n  }\n});\nexport default TextList;","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/prototypes/TextList.js"],"names":["React","Tag","SCREEN_WIDTH","TextList","props","handleTextChange","text","index","length","state","data","splice","setState","onArrayItemsChange","callback","animated","flatList","scrollToIndex","height","flex","backgroundColor","ref","_renderListHeader","bind","_renderListItem","styles","listContainerStyle","hasHeader","headerStyle","headerText","undefined","item","listItemStyle","tagStyle","container","_renderItemList","Component","StyleSheet","create","minHeight","flexDirection","alignItems","flexWrap","width","paddingHorizontal","textInput","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View, StyleSheet, FlatList, TextInput, Text } from 'react-native';\r\n\r\nimport Tag from '../components/Tag';\r\n\r\nimport { SCREEN_WIDTH } from '../Styles';\r\n\r\n// Maybe make this prop to display only tags but not add tags(?)\r\nclass TextList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // editable\r\n        // hasHeader\r\n        // headerText\r\n        // headerStyle\r\n        // hasDeleteButton\r\n        // deleteButtonStyle\r\n        // onArrayItemsChange returns (newArray)\r\n        // tagIsRectangle\r\n        // tagStyle\r\n\r\n        this.state = {\r\n            text: [\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\"\r\n            ],\r\n            data: [\r\n                \"item1\",\r\n                \"item2\",\r\n                \"item3\",\r\n                \"item4\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    scrollToIndex(index, animated) {\r\n        this.flatList.scrollToIndex({animated: animated, index: index});\r\n    }\r\n\r\n    handleTextChange = (text, index) => {\r\n        // When a space bar is detected, you wanna add an item to the next index\r\n        // If item is the last then just add the item to the back of the list\r\n\r\n        if (text[text.length-1] == \" \") {\r\n            this.state.text[index] = \"\";\r\n            this.state.data.splice(index+1, 0, text)\r\n            this.setState({data: this.state.data})\r\n        } else {\r\n            this.state.text[index] = text;\r\n        }\r\n\r\n        this.setState({text: this.state.text})\r\n\r\n    }\r\n\r\n    _renderItemList() {\r\n        return(\r\n            <FlatList\r\n                style={{height: 40, flex: 1, backgroundColor: 'pink'}}\r\n                ref={ref => this.flatList = ref}\r\n                data={this.state.data}\r\n                ListHeaderComponent={this._renderListHeader.bind(this)}\r\n                renderItem={this._renderListItem.bind(this)}\r\n                contentContainerStyle={styles.listContainerStyle}\r\n            />\r\n        )\r\n    }\r\n\r\n    _renderListHeader() {\r\n        if (this.props.hasHeader) {\r\n            return(<Text style={[styles.headerStyle, this.props.headerStyle]}>{this.props.headerText == undefined ? \"Header\" : this.props.headerText}: </Text>)\r\n        } else {\r\n            return(null)\r\n        }\r\n    }\r\n\r\n    _renderListItem({item, index}) {\r\n        return(\r\n            <View style={styles.listItemStyle}>\r\n                <Tag value={item} style={[styles.tagStyle, this.props.tagStyle]}/>\r\n                <TextInput\r\n                    value={this.state.text[index]}\r\n                    multiline\r\n                    onChangeText={(text) => this.handleTextChange(text, index)}\r\n                />\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onArrayItemsChange = (callback) => {\r\n        // return item and index\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <View style={styles.container}>\r\n                {this._renderItemList()}\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        minHeight: 1600,\r\n    },\r\n    headerStyle: {\r\n    },\r\n    tagStyle: {\r\n    },\r\n    listContainerStyle: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap',\r\n        width: SCREEN_WIDTH,\r\n        paddingHorizontal: 20,\r\n    },\r\n    listItemStyle: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    textInput: {\r\n        height: 40,\r\n        paddingHorizontal: 20,\r\n        fontSize: 16\r\n    }\r\n})\r\n\r\nexport default TextList;"]},"metadata":{},"sourceType":"module"}