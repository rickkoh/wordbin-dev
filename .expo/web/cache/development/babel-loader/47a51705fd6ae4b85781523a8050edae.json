{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as SQLite from 'expo-sqlite';\nimport * as FileSystem from 'expo-file-system';\nimport Word from \"../models/Word\";\nimport Meaning from \"../models/Meaning\";\nimport Series from \"../models/Series\";\nimport Tag from \"../models/Tag\";\nimport WordSeries from \"../models/WordSeries\";\nimport WordTag from \"../models/WordTag\";\nimport WordSynonym from \"../models/WordSynonym\";\nimport MeaningSentence from \"../models/MeaningSentence\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nvar DATABASE_NAME = 'db.db';\ndb = SQLite.openDatabase(DATABASE_NAME);\n\nvar Database = function () {\n  function Database() {\n    _classCallCheck(this, Database);\n  }\n\n  _createClass(Database, [{\n    key: \"initializeDatabase\",\n    value: function initializeDatabase() {\n      var _this = this;\n\n      FileSystem.getInfoAsync(FileSystem.documentDirectory + \"SQLite/\" + DATABASE_NAME).then(function (file) {\n        if (!file.exists) {\n          _this.createDatabase();\n\n          console.log('Database intialized');\n          DeviceEventEmitter.emit(\"database_changed\");\n        }\n      });\n    }\n  }, {\n    key: \"createDatabase\",\n    value: function createDatabase() {\n      db.transaction(function (tx) {\n        tx.executeSql(Word.Query.CREATE_WORD_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(Meaning.Query.CREATE_MEANING_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(Series.Query.CREATE_SERIES_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(Tag.Query.CREATE_TAG_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(WordSeries.Query.CREATE_WORDSERIES_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(WordTag.Query.CREATE_WORDTAG_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(WordSynonym.Query.CREATE_WORDSYNONYM_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      db.transaction(function (tx) {\n        tx.executeSql(MeaningSentence.Query.CREATE_MEANINGSENTENCE_TABLE);\n      }, function (error) {\n        console.log(error);\n      });\n      console.log(\"Database created.\");\n    }\n  }, {\n    key: \"deleteDatabase\",\n    value: function deleteDatabase() {\n      FileSystem.deleteAsync(FileSystem.documentDirectory + \"SQLite/\" + DATABASE_NAME);\n      console.log(\"Database deleted.\");\n    }\n  }, {\n    key: \"resetDatabase\",\n    value: function resetDatabase() {\n      this.deleteDatabase();\n      this.createDatabase();\n      console.log(\"Database resetted.\");\n    }\n  }, {\n    key: \"addWord\",\n    value: function addWord(word) {\n      return new Promise(function (resolve, reject) {\n        word_id = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Word.Query.INSERT_WORD_QUERY, [word.word_text, word.word_pronunciation, word.word_origin], function (_, _ref) {\n            var insertId = _ref.insertId;\n            return word_id = insertId;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(word_id);\n        });\n      });\n    }\n  }, {\n    key: \"deleteWord\",\n    value: function deleteWord(word_id) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(Word.Query.DELETE_WORD_QUERY, [word_id], null);\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          _this2.deleteMeaningByWordId(word_id);\n\n          resolve(true);\n        });\n      });\n    }\n  }, {\n    key: \"addMeaning\",\n    value: function addMeaning(meaning) {\n      return new Promise(function (resolve, reject) {\n        meaning_id = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Meaning.Query.INSERT_MEANING_QUERY, [meaning.meaning_word_id, meaning.meaning_text, meaning.meaning_classification], function (_, _ref2) {\n            var insertId = _ref2.insertId;\n            return meaning_id = insertId;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(meaning_id);\n        });\n      });\n    }\n  }, {\n    key: \"deleteMeaningByWordId\",\n    value: function deleteMeaningByWordId(word_id) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(Meaning.Query.DELETE_MEANING_BY_WORD_ID_QUERY, [word_id], null);\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"addSeries\",\n    value: function addSeries(series_title) {\n      return new Promise(function (resolve, reject) {\n        series_id = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Series.Query.INSERT_SERIES_QUERY, [series_title], function (_, _ref3) {\n            var insertId = _ref3.insertId;\n            return series_id = insertId;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(series_id);\n        });\n      });\n    }\n  }, {\n    key: \"addWordSeries\",\n    value: function addWordSeries(word_id, series_id) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(WordSeries.Query.INSERT_WORDSERIES_QUERY, [word_id, series_id], null);\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(true);\n        });\n      });\n    }\n  }, {\n    key: \"addMeaningSentence\",\n    value: function addMeaningSentence(meaning_id, meaningsentence) {\n      return new Promise(function (resolve, reject) {\n        meaningsentence_id = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(MeaningSentence.Query.INSERT_MEANINGSENTENCE_QUERY, [meaning_id, meaningsentence.meaningsentence_text], function (_, _ref4) {\n            var insertId = _ref4.insertId;\n            return meaningsentence_id = insertId;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(meaningsentence_id);\n        });\n      });\n    }\n  }, {\n    key: \"addTag\",\n    value: function addTag(tag) {\n      return new Promise(function (resolve, reject) {\n        tag_id = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Tag.Query.INSERT_TAG_QUERY, [tag.tag_title], function (_, _ref5) {\n            var insertId = _ref5.insertId;\n            return tag_id = insertId;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(tag_id);\n        });\n      });\n    }\n  }, {\n    key: \"addWordTag\",\n    value: function addWordTag(word_id, tag_id) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(WordTag.Query.INSERT_WORDTAG_QUERY, [word_id, tag_id], null);\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(true);\n        });\n      });\n    }\n  }, {\n    key: \"getWords\",\n    value: function getWords() {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Word.Query.SELECT_ALL_WORD_QUERY_ORDERBY_LATEST, [], function (_, _ref6) {\n            var _array = _ref6.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getWord\",\n    value: function getWord(word_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Word.Query.SELECT_WORD_BY_ID_QUERY, [word_id], function (_, _ref7) {\n            var _array = _ref7.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getWordsByTags\",\n    value: function getWordsByTags(tag_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(WordTag.Query.SELECT_ALL_TAGWORD_ORDERBY_LATEST_QUERY, [tag_id], function (_, _ref8) {\n            var _array = _ref8.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getMeanings\",\n    value: function getMeanings(word_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Meaning.Query.SELECT_ALL_MEANING_QUERY, [word_id], function (_, _ref9) {\n            var _array = _ref9.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getMeaningSentence\",\n    value: function getMeaningSentence(meaning_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(meaningnSen.Query.SELECT_ALL_MEANINGSENTENCE_QUERY, [meaning_id], function (_, _ref10) {\n            var _array = _ref10.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getSeries\",\n    value: function getSeries() {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Series.Query.SELECT_ALL_SERIES_QUERY, [], function (_, _ref11) {\n            var _array = _ref11.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getTag\",\n    value: function getTag(tag_title) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Tag.Query.SELECT_TAGS_QUERY, [tag_title], function (_, _ref12) {\n            var _array = _ref12.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getTags\",\n    value: function getTags() {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Tag.Query.SELECT_ALL_TAGS_QUERY, [], function (_, _ref13) {\n            var _array = _ref13.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getSeriesWords\",\n    value: function getSeriesWords(series_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(WordSeries.Query.SELECT_ALL_SERIESWORD_QUERY, [series_id], function (_, _ref14) {\n            var _array = _ref14.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getWordSeries\",\n    value: function getWordSeries(word_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(WordSeries.Query.SELECT_ALL_WORDSERIES_QUERY, [word_id], function (_, _ref15) {\n            var _array = _ref15.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getWordTags\",\n    value: function getWordTags(word_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(WordTag.Query.SELECT_ALL_WORDTAG_QUERY, [word_id], function (_, _ref16) {\n            var _array = _ref16.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getTagWords\",\n    value: function getTagWords(tag_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(WordTag.Query.SELECT_ALL_WORDTAG_QUERY, [tag_id], function (_, _ref17) {\n            var _array = _ref17.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"getWordSynonym\",\n    value: function getWordSynonym(meaning_id) {\n      return new Promise(function (resolve, reject) {\n        result = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(WordSynonym.Query.SELECT_ALL_WORDSYNONYM_QUERY, [meaning_id], function (_, _ref18) {\n            var _array = _ref18.rows._array;\n            return result = _array;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(result);\n        });\n      });\n    }\n  }, {\n    key: \"updateWord\",\n    value: function updateWord(word_id, word_text) {\n      return new Promise(function (resolve, reject) {\n        noRowsAffected = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Word.Query.UPDATE_WORD_QUERY, [word_text, word_id], function (_, _ref19) {\n            var rowsAffected = _ref19.rowsAffected;\n            return noRowsAffected = rowsAffected;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(noRowsAffected);\n        });\n      });\n    }\n  }, {\n    key: \"updateMeaningText\",\n    value: function updateMeaningText(meaning_id, meaning_text) {\n      return new Promise(function (resolve, reject) {\n        noRowsAffected = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Meaning.Query.UPDATE_MEANING_TEXT_QUERY, [meaning_text, meaning_id], function (_, _ref20) {\n            var rowsAffected = _ref20.rowsAffected;\n            return noRowsAffected = rowsAffected;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(noRowsAffected);\n        });\n      });\n    }\n  }, {\n    key: \"updateMeaningClassification\",\n    value: function updateMeaningClassification(meaning_id, meaning_classification) {\n      return new Promise(function (resolve, reject) {\n        noRowsAffected = undefined;\n        db.transaction(function (tx) {\n          tx.executeSql(Meaning.Query.UPDATE_MEANING_CLASSIFICATION_QUERY, [meaning_classification, meaning_id], function (_, _ref21) {\n            var rowsAffected = _ref21.rowsAffected;\n            return noRowsAffected = rowsAffected;\n          });\n        }, function (error) {\n          reject(error);\n        }, function (success) {\n          resolve(noRowsAffected);\n        });\n      });\n    }\n  }, {\n    key: \"printDatabaseLocation\",\n    value: function printDatabaseLocation() {\n      console.log(FileSystem.documentDirectory + \"SQLite/\" + DATABASE_NAME);\n    }\n  }]);\n\n  return Database;\n}();\n\nvar database = new Database();\nexport default database;","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/services/Database.js"],"names":["SQLite","FileSystem","Word","Meaning","Series","Tag","WordSeries","WordTag","WordSynonym","MeaningSentence","DATABASE_NAME","db","openDatabase","Database","getInfoAsync","documentDirectory","then","file","exists","createDatabase","console","log","DeviceEventEmitter","emit","transaction","tx","executeSql","Query","CREATE_WORD_TABLE","error","CREATE_MEANING_TABLE","CREATE_SERIES_TABLE","CREATE_TAG_TABLE","CREATE_WORDSERIES_TABLE","CREATE_WORDTAG_TABLE","CREATE_WORDSYNONYM_TABLE","CREATE_MEANINGSENTENCE_TABLE","deleteAsync","deleteDatabase","word","Promise","resolve","reject","word_id","undefined","INSERT_WORD_QUERY","word_text","word_pronunciation","word_origin","_","insertId","success","DELETE_WORD_QUERY","deleteMeaningByWordId","meaning","meaning_id","INSERT_MEANING_QUERY","meaning_word_id","meaning_text","meaning_classification","DELETE_MEANING_BY_WORD_ID_QUERY","result","series_title","series_id","INSERT_SERIES_QUERY","INSERT_WORDSERIES_QUERY","meaningsentence","meaningsentence_id","INSERT_MEANINGSENTENCE_QUERY","meaningsentence_text","tag","tag_id","INSERT_TAG_QUERY","tag_title","INSERT_WORDTAG_QUERY","SELECT_ALL_WORD_QUERY_ORDERBY_LATEST","_array","rows","SELECT_WORD_BY_ID_QUERY","SELECT_ALL_TAGWORD_ORDERBY_LATEST_QUERY","SELECT_ALL_MEANING_QUERY","meaningnSen","SELECT_ALL_MEANINGSENTENCE_QUERY","SELECT_ALL_SERIES_QUERY","SELECT_TAGS_QUERY","SELECT_ALL_TAGS_QUERY","SELECT_ALL_SERIESWORD_QUERY","SELECT_ALL_WORDSERIES_QUERY","SELECT_ALL_WORDTAG_QUERY","SELECT_ALL_WORDSYNONYM_QUERY","noRowsAffected","UPDATE_WORD_QUERY","rowsAffected","UPDATE_MEANING_TEXT_QUERY","UPDATE_MEANING_CLASSIFICATION_QUERY","database"],"mappings":"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","sourcesContent":["// Import modules\r\nimport * as SQLite from 'expo-sqlite';\r\nimport * as FileSystem from 'expo-file-system';\r\n\r\n// Import models\r\nimport Word from '../models/Word';\r\nimport Meaning from '../models/Meaning';\r\nimport Series from '../models/Series';\r\nimport Tag from '../models/Tag';\r\nimport WordSeries from '../models/WordSeries';\r\nimport WordTag from '../models/WordTag';\r\nimport WordSynonym from '../models/WordSynonym';\r\nimport MeaningSentence from '../models/MeaningSentence';\r\nimport { DeviceEventEmitter } from 'react-native';\r\n\r\nconst DATABASE_NAME = 'db.db';\r\n\r\n// TODO: Devise a proper naming convention for the database functions\r\n\r\ndb = SQLite.openDatabase(DATABASE_NAME);\r\n\r\nclass Database {\r\n\r\n    // Connect to the database\r\n    // Ensure that database file is created\r\n    initializeDatabase() {\r\n        FileSystem.getInfoAsync(FileSystem.documentDirectory + \"SQLite/\" + DATABASE_NAME).then(file => {\r\n            if (!file.exists) {\r\n                this.createDatabase();\r\n                console.log('Database intialized');\r\n                DeviceEventEmitter.emit(\"database_changed\");\r\n            }\r\n        });\r\n    }\r\n\r\n    // Create the database\r\n    createDatabase() {\r\n        db.transaction(tx => {\r\n            tx.executeSql(Word.Query.CREATE_WORD_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(Meaning.Query.CREATE_MEANING_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(Series.Query.CREATE_SERIES_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(Tag.Query.CREATE_TAG_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(WordSeries.Query.CREATE_WORDSERIES_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(WordTag.Query.CREATE_WORDTAG_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(WordSynonym.Query.CREATE_WORDSYNONYM_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        });\r\n\r\n        db.transaction(tx => {\r\n            tx.executeSql(MeaningSentence.Query.CREATE_MEANINGSENTENCE_TABLE);\r\n        }, error => {\r\n            console.log(error);\r\n        })\r\n\r\n        console.log(\"Database created.\");\r\n    }\r\n\r\n    // Delete the database\r\n    deleteDatabase() {\r\n        FileSystem.deleteAsync(FileSystem.documentDirectory + \"SQLite/\" + DATABASE_NAME);\r\n        console.log(\"Database deleted.\");\r\n    }\r\n\r\n    // Reset the database\r\n    resetDatabase() {\r\n        this.deleteDatabase();\r\n        this.createDatabase();\r\n        console.log(\"Database resetted.\");\r\n    }\r\n\r\n    // Add word to the database\r\n    addWord(word) {\r\n        return new Promise((resolve, reject) => {\r\n            word_id = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Word.Query.INSERT_WORD_QUERY,\r\n                    [word.word_text, word.word_pronunciation, word.word_origin],\r\n                    (_, { insertId }) => word_id = insertId\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(word_id);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Delete a word from the database\r\n    deleteWord(word_id) {\r\n        return new Promise((resolve, reject) => {\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Word.Query.DELETE_WORD_QUERY,\r\n                    [word_id],\r\n                    (null)\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                // Code can run synchronously\r\n                this.deleteMeaningByWordId(word_id);\r\n                resolve(true);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Add meaning(s) to the word object\r\n    addMeaning(meaning) {\r\n        return new Promise((resolve, reject) => {\r\n            meaning_id = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Meaning.Query.INSERT_MEANING_QUERY,\r\n                    [meaning.meaning_word_id, meaning.meaning_text, meaning.meaning_classification],\r\n                    (_, { insertId }) => meaning_id = insertId\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(meaning_id);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Delete all the meaning from the word object\r\n    deleteMeaningByWordId(word_id) {\r\n        return new Promise((resolve, reject) => {\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Meaning.Query.DELETE_MEANING_BY_WORD_ID_QUERY,\r\n                    [word_id],\r\n                    (null)\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Add a series to the database\r\n    addSeries(series_title) {\r\n        return new Promise((resolve, reject) => {\r\n            series_id = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Series.Query.INSERT_SERIES_QUERY,\r\n                    [series_title],\r\n                    (_, { insertId }) => series_id = insertId\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(series_id);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Add a word series to the database\r\n    addWordSeries(word_id, series_id) {\r\n        return new Promise((resolve, reject) => {\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordSeries.Query.INSERT_WORDSERIES_QUERY,\r\n                    [word_id, series_id],\r\n                    (null)\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Add a sentence example to the meaning object\r\n    addMeaningSentence(meaning_id, meaningsentence) {\r\n        return new Promise((resolve, reject) => {\r\n            meaningsentence_id = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    MeaningSentence.Query.INSERT_MEANINGSENTENCE_QUERY,\r\n                    [meaning_id, meaningsentence.meaningsentence_text],\r\n                    (_, { insertId }) => meaningsentence_id = insertId\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(meaningsentence_id);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Add a tag to the database\r\n    addTag(tag) {\r\n        return new Promise((resolve, reject) => {\r\n            tag_id = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Tag.Query.INSERT_TAG_QUERY,\r\n                    [tag.tag_title],\r\n                    (_, { insertId }) => tag_id = insertId\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(tag_id);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Link the tag to a word object\r\n    addWordTag(word_id, tag_id) {\r\n        return new Promise((resolve, reject) => {\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordTag.Query.INSERT_WORDTAG_QUERY,\r\n                    [word_id, tag_id],\r\n                    (null)\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Get all the words from the database\r\n    getWords() {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Word.Query.SELECT_ALL_WORD_QUERY_ORDERBY_LATEST,\r\n                    [],\r\n                    (_, {rows: { _array } }) => result = _array \r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get a word from the database\r\n    getWord(word_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Word.Query.SELECT_WORD_BY_ID_QUERY,\r\n                    [word_id],\r\n                    (_, {rows: { _array } }) => result = _array \r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the words based on the tag from the database\r\n    getWordsByTags(tag_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordTag.Query.SELECT_ALL_TAGWORD_ORDERBY_LATEST_QUERY,\r\n                    [tag_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the meanings of the word object\r\n    getMeanings(word_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Meaning.Query.SELECT_ALL_MEANING_QUERY,\r\n                    [word_id],\r\n                    (_, {rows: { _array } }) => result = _array \r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the sentence examples of the meaning object\r\n    getMeaningSentence(meaning_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    meaningnSen .Query.SELECT_ALL_MEANINGSENTENCE_QUERY,\r\n                    [meaning_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Get all the series from the database\r\n    getSeries() {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Series.Query.SELECT_ALL_SERIES_QUERY,\r\n                    [],\r\n                    (_, {rows: { _array } }) => result = _array \r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the tags from the database based on the tag title\r\n    getTag(tag_title) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Tag.Query.SELECT_TAGS_QUERY,\r\n                    [tag_title],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the tags from the database\r\n    getTags() {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Tag.Query.SELECT_ALL_TAGS_QUERY,\r\n                    [],\r\n                    (_, {rows: { _array } }) => result = _array \r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the words in the series\r\n    getSeriesWords(series_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordSeries.Query.SELECT_ALL_SERIESWORD_QUERY,\r\n                    [series_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the series the word belongs to\r\n    getWordSeries(word_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordSeries.Query.SELECT_ALL_WORDSERIES_QUERY,\r\n                    [word_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Get all the tags of the word\r\n    getWordTags(word_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordTag.Query.SELECT_ALL_WORDTAG_QUERY,\r\n                    [word_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error)\r\n            }, success => {\r\n                resolve(result);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Get all the words that have the tag\r\n    getTagWords(tag_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordTag.Query.SELECT_ALL_WORDTAG_QUERY,\r\n                    [tag_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            })\r\n        })\r\n    }\r\n\r\n    // Get all the word synonym\r\n    getWordSynonym(meaning_id) {\r\n        return new Promise((resolve, reject) => {\r\n            result = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    WordSynonym.Query.SELECT_ALL_WORDSYNONYM_QUERY,\r\n                    [meaning_id],\r\n                    (_, {rows: { _array } }) => result = _array\r\n                )\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Update word text\r\n    updateWord(word_id, word_text) {\r\n        return new Promise((resolve, reject) => {\r\n            noRowsAffected = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Word.Query.UPDATE_WORD_QUERY,\r\n                    [word_text, word_id],\r\n                    (_, { rowsAffected }) => noRowsAffected = rowsAffected\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(noRowsAffected);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Update meaning text\r\n    updateMeaningText(meaning_id, meaning_text) {\r\n        return new Promise((resolve, reject) => {\r\n            noRowsAffected = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Meaning.Query.UPDATE_MEANING_TEXT_QUERY,\r\n                    [meaning_text, meaning_id],\r\n                    (_, { rowsAffected }) => noRowsAffected = rowsAffected\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(noRowsAffected);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Update meaning classification\r\n    updateMeaningClassification(meaning_id, meaning_classification) {\r\n        return new Promise((resolve, reject) => {\r\n            noRowsAffected = undefined;\r\n            db.transaction(tx => {\r\n                tx.executeSql(\r\n                    Meaning.Query.UPDATE_MEANING_CLASSIFICATION_QUERY,\r\n                    [meaning_classification, meaning_id],\r\n                    (_, { rowsAffected }) => noRowsAffected = rowsAffected\r\n                );\r\n            }, error => {\r\n                reject(error);\r\n            }, success => {\r\n                resolve(noRowsAffected);\r\n            });\r\n        })\r\n    }\r\n    \r\n    // Print the database location\r\n    printDatabaseLocation() {\r\n        console.log(FileSystem.documentDirectory + \"SQLite/\" + DATABASE_NAME);\r\n    }\r\n\r\n}\r\n\r\nconst database = new Database();\r\n\r\nexport default database;"]},"metadata":{},"sourceType":"module"}