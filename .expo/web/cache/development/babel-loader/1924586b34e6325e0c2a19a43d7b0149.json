{"ast":null,"code":"var validateFormat = function validateFormat() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}\n\nexport default invariant;","map":{"version":3,"sources":["invariant.ts"],"names":["validateFormat","process","format","args","error","argIndex"],"mappings":"AAWA,IAAIA,cAAyC,GAAG,SAAA,cAAA,GAAW,CAA3D,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCD,EAAAA,cAAc,GAAG,SAAA,cAAA,CAAA,MAAA,EAA0B;AACzC,QAAIE,MAAM,KAAV,SAAA,EAA0B;AACxB,YAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AAEH;AAJDF,GAAAA;AAOF;;AAAA,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAwE;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAbG,IAAa,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAbA,IAAAA,IAAa,CAAA,IAAA,GAAA,CAAA,CAAbA,GAAa,SAAA,CAAA,IAAA,CAAbA;AACzDH;;AAAAA,EAAAA,cAAc,CAAdA,MAAc,CAAdA;;AAEA,MAAI,CAAJ,SAAA,EAAgB;AACd,QAAA,KAAA;;AACA,QAAIE,MAAM,KAAV,SAAA,EAA0B;AACxBE,MAAAA,KAAK,GAAG,IAAA,KAAA,CAARA,+HAAQ,CAARA;AADF,KAAA,MAIO;AACL,UAAIC,QAAQ,GAAZ,CAAA;AACAD,MAAAA,KAAK,GAAG,IAAA,KAAA,CAAUF,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAsB,YAAA;AAAA,eAAMC,IAAI,CAACE,QAAX,EAAU,CAAV;AAAxCD,OAAkBF,CAAV,CAARE;AACAA,MAAAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;AAGFA;;AAAAA,IAAAA,KAAK,CAALA,WAAAA,GAAAA,CAAAA;AACA,UAAA,KAAA;AAEH;AAED;;AAAA,eAAA,SAAA","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nlet validateFormat: (format?: string) => void = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function(format?: string) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error: Error & { framesToPop?: number };\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}