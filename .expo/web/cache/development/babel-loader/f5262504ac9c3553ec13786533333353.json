{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\rickkoh\\\\Desktop\\\\git\\\\wordbin-dev\\\\src\\\\components\\\\Information\\\\MeaningInformation.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\n\nvar MeaningInformation = function (_React$Component) {\n  _inherits(MeaningInformation, _React$Component);\n\n  var _super = _createSuper(MeaningInformation);\n\n  function MeaningInformation() {\n    var _this;\n\n    _classCallCheck(this, MeaningInformation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderMeaning = function (_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      synonym = [{\n        text: \"Synonyms:\"\n      }];\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, item.meaning_classification == undefined ? null : React.createElement(Text, {\n        style: {\n          fontSize: 12,\n          marginBottom: 5,\n          color: 'gray'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }\n      }, item.meaning_classification), React.createElement(Text, {\n        style: {\n          fontSize: 14,\n          marginBottom: 7.5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, item.meaning_text));\n    };\n\n    _this.renderSynonym = function (_ref2) {\n      var item = _ref2.item,\n          index = _ref2.index;\n\n      if (index == 0) {\n        return React.createElement(View, {\n          style: {\n            marginRight: 5,\n            marginBottom: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 12,\n            color: 'green'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }\n        }, item.word_text));\n      } else {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return DeviceEventEmitter.emit(\"change_title\", item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }\n        }, React.createElement(Tag, {\n          value: item.tag_title,\n          style: {\n            marginRight: 5,\n            marginBottom: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MeaningInformation, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(FlatList, {\n        data: this.props.data,\n        renderItem: this.renderMeaning,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        listKey: function listKey(item, index) {\n          return index.toString();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return MeaningInformation;\n}(React.Component);\n\nexport default MeaningInformation;","map":{"version":3,"sources":["C:/Users/rickkoh/Desktop/git/wordbin-dev/src/components/Information/MeaningInformation.js"],"names":["React","MeaningInformation","renderMeaning","item","index","synonym","text","meaning_classification","undefined","fontSize","marginBottom","color","meaning_text","renderSynonym","marginRight","word_text","DeviceEventEmitter","emit","tag_title","props","data","toString","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;IAGMC,kB;;;;;;;;;;;;;;;;UAiBFC,a,GAAgB,gBAAmB;AAAA,UAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,UAAXC,KAAW,QAAXA,KAAW;AAC/BC,MAAAA,OAAO,GAAG,CAAC;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAV;AACA,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKH,IAAI,CAACI,sBAAL,IAA+BC,SAA/B,GAA2C,IAA3C,GACG,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,YAAY,EAAE,CAA7B;AAAgCC,UAAAA,KAAK,EAAE;AAAvC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8DR,IAAI,CAACI,sBAAnE,CAFR,EAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,YAAY,EAAE;AAA7B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkDP,IAAI,CAACS,YAAvD,CAJJ,CADJ;AAmBH,K;;UAEDC,a,GAAgB,iBAAmB;AAAA,UAAjBV,IAAiB,SAAjBA,IAAiB;AAAA,UAAXC,KAAW,SAAXA,KAAW;;AAC/B,UAAIA,KAAK,IAAE,CAAX,EAAc;AAEV,eACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACU,YAAAA,WAAW,EAAE,CAAd;AAAiBJ,YAAAA,YAAY,EAAE;AAA/B,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeE,YAAAA,KAAK,EAAE;AAAtB,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8CR,IAAI,CAACY,SAAnD,CADJ,CADJ;AAKH,OAPD,MAOO;AAEH,eACI,oBAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE;AAAA,mBAAMC,kBAAkB,CAACC,IAAnB,CAAwB,cAAxB,EAAyCd,IAAzC,CAAN;AAAA,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,KAAK,EAAEA,IAAI,CAACe,SAAjB;AAA4B,UAAA,KAAK,EAAE;AAACJ,YAAAA,WAAW,EAAE,CAAd;AAAiBJ,YAAAA,YAAY,EAAE;AAA/B,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAKH;AACJ,K;;;;;;;6BAtDQ;AACL,aACI,oBAAC,QAAD;AACI,QAAA,IAAI,EAAE,KAAKS,KAAL,CAAWC,IADrB;AAEI,QAAA,UAAU,EAAE,KAAKlB,aAFrB;AAGI,QAAA,YAAY,EAAE,sBAACC,IAAD,EAAOC,KAAP;AAAA,iBAAiBA,KAAK,CAACiB,QAAN,EAAjB;AAAA,SAHlB;AAII,QAAA,OAAO,EAAE,iBAAClB,IAAD,EAAOC,KAAP;AAAA,iBAAiBA,KAAK,CAACiB,QAAN,EAAjB;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQH;;;;EAX4BrB,KAAK,CAACsB,S;;AA2DvC,eAAerB,kBAAf","sourcesContent":["import React from 'react';\r\nimport { View, Text, FlatList } from 'react-native';\r\n\r\nclass MeaningInformation extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <FlatList\r\n                data={this.props.data}\r\n                renderItem={this.renderMeaning}\r\n                keyExtractor={(item, index) => index.toString()}\r\n                listKey={(item, index) => index.toString()}\r\n            />\r\n        )\r\n    }\r\n\r\n    // Render the following (in order):\r\n    // Classification,\r\n    // Meaning,\r\n    // Synonyms,\r\n    renderMeaning = ({item, index}) => {\r\n        synonym = [{text: \"Synonyms:\"}]\r\n        return(\r\n            <View>\r\n                {item.meaning_classification == undefined ? null : (\r\n                    <Text style={{fontSize: 12, marginBottom: 5, color: 'gray'}}>{item.meaning_classification}</Text>\r\n                )}\r\n                <Text style={{fontSize: 14, marginBottom: 7.5 }}>{item.meaning_text}</Text>\r\n                {\r\n                    // synonym.length <= 1 ? null : (\r\n                        // <FlatList\r\n                            // data={synonym}\r\n                            // style={{flexDirection: 'row', flexWrap: 'wrap', alignItems: 'center'}}\r\n                            // renderItem={this.renderSynonym} \r\n                            // keyExtractor={(item, index) => index.toString()}\r\n                            // listKey={(item, index) => index.toString()}\r\n                        // />\r\n                    // )\r\n                }\r\n            </View>\r\n        )\r\n    }\r\n\r\n    renderSynonym = ({item, index}) => {\r\n        if (index==0) {\r\n            // Render tag header\r\n            return (\r\n                <View style={{marginRight: 5, marginBottom: 10}}>\r\n                    <Text style={{fontSize: 12, color: 'green'}}>{item.word_text}</Text>\r\n                </View>\r\n            )\r\n        } else {\r\n            // Render tag\r\n            return (\r\n                <TouchableOpacity onPress={() => DeviceEventEmitter.emit(\"change_title\", (item))}>\r\n                    <Tag value={item.tag_title} style={{marginRight: 5, marginBottom: 10}}/>\r\n                </TouchableOpacity>\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nexport default MeaningInformation;"]},"metadata":{},"sourceType":"module"}